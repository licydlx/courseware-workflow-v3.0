{
    "sourceFile": "assets/prefabLibrary/models/dragAnswer/dragAnswer-model01-v1.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1624621940902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1624621961258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,412 @@\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ydlx\r\n+ * @Date: 2021-03-26 18:05:12\r\n+ * @LastEditors: ydlx\r\n+ * @LastEditTime: 2021-05-20 17:50:34\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { pointBelongArea } = window['GlobalData'].utils;\r\n+\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class dragAnswer_model01_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _dragBtn: fgui.GButton;\r\n+    private _btnBox: fgui.GButton;\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // fairygui 组件\r\n+    private handleGuide: any;\r\n+    private lineBlink: any;\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _grids = [];\r\n+\r\n+    private _cache = {};\r\n+    private _scheduleTime = .3;\r\n+    private _dragging = false;\r\n+\r\n+    private _answer = 0;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        this._c2 = this._view.getController(\"c2\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c2) {\r\n+            this._c2.selectedIndex = 1;\r\n+            this._c2.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+\r\n+        this._dragBtn = this._view.getChild(\"dragBtn\").asButton;\r\n+        this._cache[\"dragOrigin\"] = this.getOriginValue(this._dragBtn);\r\n+\r\n+        this._dragBtn.draggable = true;\r\n+        this._dragBtn.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._dragBtn.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._dragBtn.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        this._btnBox = this._view.getChild(\"btnBox\").asButton;\r\n+        if (this._btnBox) this._btnBox.on(fgui.Event.CLICK, this._clickRemove, this);\r\n+\r\n+        let aGroup = this._btnBox.getChild(\"grids\").asGroup;\r\n+\r\n+        // for (let i = 0; i < this._btnBox.numChildren; i++) {\r\n+        //     if (this._btnBox.getChildAt(i).group == aGroup) {\r\n+        //         let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n+        //         this._grids.push(grid);\r\n+        //     }\r\n+        // }\r\n+\r\n+        for (let i = this._btnBox.numChildren - 1; i > -1; i--) {\r\n+            if (this._btnBox.getChildAt(i).group == aGroup) {\r\n+                let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n+                this._grids.push(grid);\r\n+            }\r\n+        }\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            drag: \"end\",\r\n+            dragBtn: {\r\n+                x: this._dragBtn.x,\r\n+                y: this._dragBtn.y\r\n+            },\r\n+            title: false,\r\n+            drops: 0,\r\n+            submit: false,\r\n+            answer: false\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { answer, ae } = model.config;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        // 动效注册\r\n+        for (let v in ae) {\r\n+            if (ae[v]) {\r\n+                this[v] = {};\r\n+                if (ae[v].component) this[v].component = fgui.UIPackage.createObject(Package, ae[v].component).asCom;\r\n+                if (ae[v].pos) this[v].pos = ae[v].pos;\r\n+            }\r\n+        }\r\n+\r\n+        if (answer) this._answer = answer;\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    getOriginValue(v: any) {\r\n+        return {\r\n+            x: v.x,\r\n+            y: v.y\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+        evt.captureTouch();\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = \"start\";\r\n+        state.answer = state.drops === this._answer;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+        this._dragging = true;\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let bool: boolean = pointBelongArea(\"rectangle\", this._btnBox, this._dragBtn);\r\n+        if (bool) {\r\n+            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n+            let grid: fgui.GLoader = this._grids.find(v => v.url === null);\r\n+            if (grid) {\r\n+                //grid.url = icon.url;\r\n+                state.drops = state.drops + 1;\r\n+            }\r\n+        }\r\n+\r\n+        state.dragBtn = {\r\n+            x: this._cache[\"dragOrigin\"].x,\r\n+            y: this._cache[\"dragOrigin\"].y,\r\n+        };\r\n+        state.drag = \"end\";\r\n+        state.answer = state.drops === this._answer;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickRemove(evt: any): void {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+\r\n+        let index: number = this._grids.findIndex((v: any) => v.url === null);\r\n+        if (index !== 0) {\r\n+            // let grid: fgui.GLoader = this._grids[index == -1 ? this._grids.length - 1 : index - 1];\r\n+            // grid.url = null;\r\n+\r\n+            state.drops = state.drops - 1;\r\n+            state.answer = state.drops === this._answer;\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.answer = state.drops === this._answer;\r\n+        state.submit = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+        if (state.drag == \"move\") {\r\n+            this._dragBtn.x = state.dragBtn.x;\r\n+            this._dragBtn.y = state.dragBtn.y;\r\n+        }\r\n+\r\n+        if (state.drag == \"end\") {\r\n+            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n+            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n+\r\n+            if (!globalThis._.isEqual(oldState.drops, state.drops)) {\r\n+                for (let i = 0; i < this._grids.length; i++) {\r\n+                    let grid: fgui.GLoader = this._grids[i];\r\n+                    if (state.drops > i) {\r\n+                        if (!grid.url) {\r\n+                            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n+                            grid.url = icon.url;\r\n+                        }\r\n+                    } else {\r\n+                        if (grid.url) grid.url = null;\r\n+                    }\r\n+                }\r\n+                this._c1.selectedIndex = state.drops;\r\n+\r\n+                if (!state.answer) this.onLibraHint();\r\n+            }\r\n+\r\n+            if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+                if (state.submit) {\r\n+                    if (state.drops) {\r\n+                        this.answerFeedback(state.answer);\r\n+                    } else {\r\n+                        this.onHandleGuide();\r\n+                    }\r\n+                }\r\n+            }\r\n+\r\n+            if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+                this.playTitle(state.title);\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c2.selectedIndex = bool ? 1 : 0;\r\n+\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            state.submit = false;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    // 天枰提示\r\n+    onLibraHint() {\r\n+        if (!this.lineBlink) return;\r\n+        fgui.GRoot.inst.addChild(this.lineBlink.component);\r\n+        if (this.lineBlink.pos) {\r\n+            this.lineBlink.component.x = (fgui.GRoot.inst.width - this.lineBlink.component.width) / 2 + this.lineBlink.pos.x;\r\n+            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2 + this.lineBlink.pos.y;\r\n+        } else {\r\n+            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2;\r\n+        }\r\n+\r\n+        let t: fgui.Transition = this.lineBlink.component.getTransition(\"t0\");\r\n+        t.play(() => {\r\n+            fgui.GRoot.inst.removeChild(this.lineBlink.component);\r\n+        });\r\n+    }\r\n+\r\n+    // 操作提示\r\n+    onHandleGuide() {\r\n+        if (!this.handleGuide) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        fgui.GRoot.inst.addChild(this.handleGuide.component);\r\n+        if (this.handleGuide.pos) {\r\n+            this.handleGuide.component.x = (fgui.GRoot.inst.width - this.handleGuide.component.width) / 2 + this.handleGuide.pos.x;\r\n+            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2 + this.handleGuide.pos.y;\r\n+        } else {\r\n+            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2;\r\n+        }\r\n+\r\n+        let t: fgui.Transition = this.handleGuide.component.getTransition(\"t0\");\r\n+        t.play(() => {\r\n+            fgui.GRoot.inst.removeChild(this.handleGuide.component);\r\n+            state.submit = false;\r\n+            this.updateState(state);\r\n+        }, 2);\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.dragBtn = {\r\n+                x: this._dragBtn.x,\r\n+                y: this._dragBtn.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624622962330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,416 +409,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ydlx\r\n- * @Date: 2021-03-26 18:05:12\r\n- * @LastEditors: ydlx\r\n- * @LastEditTime: 2021-05-20 17:50:34\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { pointBelongArea } = window['GlobalData'].utils;\r\n-\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class dragAnswer_model01_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _dragBtn: fgui.GButton;\r\n-    private _btnBox: fgui.GButton;\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // fairygui 组件\r\n-    private handleGuide: any;\r\n-    private lineBlink: any;\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _grids = [];\r\n-\r\n-    private _cache = {};\r\n-    private _scheduleTime = .3;\r\n-    private _dragging = false;\r\n-\r\n-    private _answer = 0;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        this._c2 = this._view.getController(\"c2\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c2) {\r\n-            this._c2.selectedIndex = 1;\r\n-            this._c2.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-\r\n-        this._dragBtn = this._view.getChild(\"dragBtn\").asButton;\r\n-        this._cache[\"dragOrigin\"] = this.getOriginValue(this._dragBtn);\r\n-\r\n-        this._dragBtn.draggable = true;\r\n-        this._dragBtn.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._dragBtn.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._dragBtn.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        this._btnBox = this._view.getChild(\"btnBox\").asButton;\r\n-        if (this._btnBox) this._btnBox.on(fgui.Event.CLICK, this._clickRemove, this);\r\n-\r\n-        let aGroup = this._btnBox.getChild(\"grids\").asGroup;\r\n-\r\n-        // for (let i = 0; i < this._btnBox.numChildren; i++) {\r\n-        //     if (this._btnBox.getChildAt(i).group == aGroup) {\r\n-        //         let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n-        //         this._grids.push(grid);\r\n-        //     }\r\n-        // }\r\n-\r\n-        for (let i = this._btnBox.numChildren - 1; i > -1; i--) {\r\n-            if (this._btnBox.getChildAt(i).group == aGroup) {\r\n-                let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n-                this._grids.push(grid);\r\n-            }\r\n-        }\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            drag: \"end\",\r\n-            dragBtn: {\r\n-                x: this._dragBtn.x,\r\n-                y: this._dragBtn.y\r\n-            },\r\n-            title: false,\r\n-            drops: 0,\r\n-            submit: false,\r\n-            answer: false\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { answer, ae } = model.config;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        // 动效注册\r\n-        for (let v in ae) {\r\n-            if (ae[v]) {\r\n-                this[v] = {};\r\n-                if (ae[v].component) this[v].component = fgui.UIPackage.createObject(Package, ae[v].component).asCom;\r\n-                if (ae[v].pos) this[v].pos = ae[v].pos;\r\n-            }\r\n-        }\r\n-\r\n-        if (answer) this._answer = answer;\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    getOriginValue(v: any) {\r\n-        return {\r\n-            x: v.x,\r\n-            y: v.y\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-        evt.captureTouch();\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = \"start\";\r\n-        state.answer = state.drops === this._answer;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-        this._dragging = true;\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let bool: boolean = pointBelongArea(\"rectangle\", this._btnBox, this._dragBtn);\r\n-        if (bool) {\r\n-            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n-            let grid: fgui.GLoader = this._grids.find(v => v.url === null);\r\n-            if (grid) {\r\n-                //grid.url = icon.url;\r\n-                state.drops = state.drops + 1;\r\n-            }\r\n-        }\r\n-\r\n-        state.dragBtn = {\r\n-            x: this._cache[\"dragOrigin\"].x,\r\n-            y: this._cache[\"dragOrigin\"].y,\r\n-        };\r\n-        state.drag = \"end\";\r\n-        state.answer = state.drops === this._answer;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickRemove(evt: any): void {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-\r\n-        let index: number = this._grids.findIndex((v: any) => v.url === null);\r\n-        if (index !== 0) {\r\n-            // let grid: fgui.GLoader = this._grids[index == -1 ? this._grids.length - 1 : index - 1];\r\n-            // grid.url = null;\r\n-\r\n-            state.drops = state.drops - 1;\r\n-            state.answer = state.drops === this._answer;\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.answer = state.drops === this._answer;\r\n-        state.submit = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-        if (state.drag == \"move\") {\r\n-            this._dragBtn.x = state.dragBtn.x;\r\n-            this._dragBtn.y = state.dragBtn.y;\r\n-        }\r\n-\r\n-        if (state.drag == \"end\") {\r\n-            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n-            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n-\r\n-            if (!globalThis._.isEqual(oldState.drops, state.drops)) {\r\n-                for (let i = 0; i < this._grids.length; i++) {\r\n-                    let grid: fgui.GLoader = this._grids[i];\r\n-                    if (state.drops > i) {\r\n-                        if (!grid.url) {\r\n-                            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n-                            grid.url = icon.url;\r\n-                        }\r\n-                    } else {\r\n-                        if (grid.url) grid.url = null;\r\n-                    }\r\n-                }\r\n-                this._c1.selectedIndex = state.drops;\r\n-\r\n-                if (!state.answer) this.onLibraHint();\r\n-            }\r\n-\r\n-            if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-                if (state.submit) {\r\n-                    if (state.drops) {\r\n-                        this.answerFeedback(state.answer);\r\n-                    } else {\r\n-                        this.onHandleGuide();\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-            if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-                this.playTitle(state.title);\r\n-            }\r\n-\r\n-        }\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c2.selectedIndex = bool ? 1 : 0;\r\n-\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            state.submit = false;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    // 天枰提示\r\n-    onLibraHint() {\r\n-        if (!this.lineBlink) return;\r\n-        fgui.GRoot.inst.addChild(this.lineBlink.component);\r\n-        if (this.lineBlink.pos) {\r\n-            this.lineBlink.component.x = (fgui.GRoot.inst.width - this.lineBlink.component.width) / 2 + this.lineBlink.pos.x;\r\n-            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2 + this.lineBlink.pos.y;\r\n-        } else {\r\n-            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2;\r\n-        }\r\n-\r\n-        let t: fgui.Transition = this.lineBlink.component.getTransition(\"t0\");\r\n-        t.play(() => {\r\n-            fgui.GRoot.inst.removeChild(this.lineBlink.component);\r\n-        });\r\n-    }\r\n-\r\n-    // 操作提示\r\n-    onHandleGuide() {\r\n-        if (!this.handleGuide) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        fgui.GRoot.inst.addChild(this.handleGuide.component);\r\n-        if (this.handleGuide.pos) {\r\n-            this.handleGuide.component.x = (fgui.GRoot.inst.width - this.handleGuide.component.width) / 2 + this.handleGuide.pos.x;\r\n-            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2 + this.handleGuide.pos.y;\r\n-        } else {\r\n-            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2;\r\n-        }\r\n-\r\n-        let t: fgui.Transition = this.handleGuide.component.getTransition(\"t0\");\r\n-        t.play(() => {\r\n-            fgui.GRoot.inst.removeChild(this.handleGuide.component);\r\n-            state.submit = false;\r\n-            this.updateState(state);\r\n-        }, 2);\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.dragBtn = {\r\n-                x: this._dragBtn.x,\r\n-                y: this._dragBtn.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624623665172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,412 @@\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ydlx\r\n+ * @Date: 2021-03-26 18:05:12\r\n+ * @LastEditors: ydlx\r\n+ * @LastEditTime: 2021-05-20 17:50:34\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { pointBelongArea } = window['GlobalData'].utils;\r\n+\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class dragAnswer_model01_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _dragBtn: fgui.GButton;\r\n+    private _btnBox: fgui.GButton;\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // fairygui 组件\r\n+    private handleGuide: any;\r\n+    private lineBlink: any;\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _grids = [];\r\n+\r\n+    private _cache = {};\r\n+    private _scheduleTime = .3;\r\n+    private _dragging = false;\r\n+\r\n+    private _answer = 0;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        this._c2 = this._view.getController(\"c2\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c2) {\r\n+            this._c2.selectedIndex = 1;\r\n+            this._c2.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+\r\n+        this._dragBtn = this._view.getChild(\"dragBtn\").asButton;\r\n+        this._cache[\"dragOrigin\"] = this.getOriginValue(this._dragBtn);\r\n+\r\n+        this._dragBtn.draggable = true;\r\n+        this._dragBtn.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._dragBtn.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._dragBtn.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        this._btnBox = this._view.getChild(\"btnBox\").asButton;\r\n+        if (this._btnBox) this._btnBox.on(fgui.Event.CLICK, this._clickRemove, this);\r\n+\r\n+        let aGroup = this._btnBox.getChild(\"grids\").asGroup;\r\n+\r\n+        // for (let i = 0; i < this._btnBox.numChildren; i++) {\r\n+        //     if (this._btnBox.getChildAt(i).group == aGroup) {\r\n+        //         let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n+        //         this._grids.push(grid);\r\n+        //     }\r\n+        // }\r\n+\r\n+        for (let i = this._btnBox.numChildren - 1; i > -1; i--) {\r\n+            if (this._btnBox.getChildAt(i).group == aGroup) {\r\n+                let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n+                this._grids.push(grid);\r\n+            }\r\n+        }\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            drag: \"end\",\r\n+            dragBtn: {\r\n+                x: this._dragBtn.x,\r\n+                y: this._dragBtn.y\r\n+            },\r\n+            title: false,\r\n+            drops: 0,\r\n+            submit: false,\r\n+            answer: false\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { answer, ae } = model.config;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        // 动效注册\r\n+        for (let v in ae) {\r\n+            if (ae[v]) {\r\n+                this[v] = {};\r\n+                if (ae[v].component) this[v].component = fgui.UIPackage.createObject(Package, ae[v].component).asCom;\r\n+                if (ae[v].pos) this[v].pos = ae[v].pos;\r\n+            }\r\n+        }\r\n+\r\n+        if (answer) this._answer = answer;\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    getOriginValue(v: any) {\r\n+        return {\r\n+            x: v.x,\r\n+            y: v.y\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+        evt.captureTouch();\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = \"start\";\r\n+        state.answer = state.drops === this._answer;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+        this._dragging = true;\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let bool: boolean = pointBelongArea(\"rectangle\", this._btnBox, this._dragBtn);\r\n+        if (bool) {\r\n+            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n+            let grid: fgui.GLoader = this._grids.find(v => v.url === null);\r\n+            if (grid) {\r\n+                //grid.url = icon.url;\r\n+                state.drops = state.drops + 1;\r\n+            }\r\n+        }\r\n+\r\n+        state.dragBtn = {\r\n+            x: this._cache[\"dragOrigin\"].x,\r\n+            y: this._cache[\"dragOrigin\"].y,\r\n+        };\r\n+        state.drag = \"end\";\r\n+        state.answer = state.drops === this._answer;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickRemove(evt: any): void {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+\r\n+        let index: number = this._grids.findIndex((v: any) => v.url === null);\r\n+        if (index !== 0) {\r\n+            // let grid: fgui.GLoader = this._grids[index == -1 ? this._grids.length - 1 : index - 1];\r\n+            // grid.url = null;\r\n+\r\n+            state.drops = state.drops - 1;\r\n+            state.answer = state.drops === this._answer;\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.answer = state.drops === this._answer;\r\n+        state.submit = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+        if (state.drag == \"move\") {\r\n+            this._dragBtn.x = state.dragBtn.x;\r\n+            this._dragBtn.y = state.dragBtn.y;\r\n+        }\r\n+\r\n+        if (state.drag == \"end\") {\r\n+            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n+            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n+\r\n+            if (!globalThis._.isEqual(oldState.drops, state.drops)) {\r\n+                for (let i = 0; i < this._grids.length; i++) {\r\n+                    let grid: fgui.GLoader = this._grids[i];\r\n+                    if (state.drops > i) {\r\n+                        if (!grid.url) {\r\n+                            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n+                            grid.url = icon.url;\r\n+                        }\r\n+                    } else {\r\n+                        if (grid.url) grid.url = null;\r\n+                    }\r\n+                }\r\n+                this._c1.selectedIndex = state.drops;\r\n+\r\n+                if (!state.answer) this.onLibraHint();\r\n+            }\r\n+\r\n+            if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+                if (state.submit) {\r\n+                    if (state.drops) {\r\n+                        this.answerFeedback(state.answer);\r\n+                    } else {\r\n+                        this.onHandleGuide();\r\n+                    }\r\n+                }\r\n+            }\r\n+\r\n+            if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+                this.playTitle(state.title);\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c2.selectedIndex = bool ? 1 : 0;\r\n+\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            state.submit = false;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    // 天枰提示\r\n+    onLibraHint() {\r\n+        if (!this.lineBlink) return;\r\n+        fgui.GRoot.inst.addChild(this.lineBlink.component);\r\n+        if (this.lineBlink.pos) {\r\n+            this.lineBlink.component.x = (fgui.GRoot.inst.width - this.lineBlink.component.width) / 2 + this.lineBlink.pos.x;\r\n+            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2 + this.lineBlink.pos.y;\r\n+        } else {\r\n+            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2;\r\n+        }\r\n+\r\n+        let t: fgui.Transition = this.lineBlink.component.getTransition(\"t0\");\r\n+        t.play(() => {\r\n+            fgui.GRoot.inst.removeChild(this.lineBlink.component);\r\n+        });\r\n+    }\r\n+\r\n+    // 操作提示\r\n+    onHandleGuide() {\r\n+        if (!this.handleGuide) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        fgui.GRoot.inst.addChild(this.handleGuide.component);\r\n+        if (this.handleGuide.pos) {\r\n+            this.handleGuide.component.x = (fgui.GRoot.inst.width - this.handleGuide.component.width) / 2 + this.handleGuide.pos.x;\r\n+            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2 + this.handleGuide.pos.y;\r\n+        } else {\r\n+            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2;\r\n+        }\r\n+\r\n+        let t: fgui.Transition = this.handleGuide.component.getTransition(\"t0\");\r\n+        t.play(() => {\r\n+            fgui.GRoot.inst.removeChild(this.handleGuide.component);\r\n+            state.submit = false;\r\n+            this.updateState(state);\r\n+        }, 2);\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.dragBtn = {\r\n+                x: this._dragBtn.x,\r\n+                y: this._dragBtn.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624623680845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -409,416 +409,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ydlx\r\n- * @Date: 2021-03-26 18:05:12\r\n- * @LastEditors: ydlx\r\n- * @LastEditTime: 2021-05-20 17:50:34\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { pointBelongArea } = window['GlobalData'].utils;\r\n-\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class dragAnswer_model01_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _dragBtn: fgui.GButton;\r\n-    private _btnBox: fgui.GButton;\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // fairygui 组件\r\n-    private handleGuide: any;\r\n-    private lineBlink: any;\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _grids = [];\r\n-\r\n-    private _cache = {};\r\n-    private _scheduleTime = .3;\r\n-    private _dragging = false;\r\n-\r\n-    private _answer = 0;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        this._c2 = this._view.getController(\"c2\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c2) {\r\n-            this._c2.selectedIndex = 1;\r\n-            this._c2.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-\r\n-        this._dragBtn = this._view.getChild(\"dragBtn\").asButton;\r\n-        this._cache[\"dragOrigin\"] = this.getOriginValue(this._dragBtn);\r\n-\r\n-        this._dragBtn.draggable = true;\r\n-        this._dragBtn.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._dragBtn.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._dragBtn.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        this._btnBox = this._view.getChild(\"btnBox\").asButton;\r\n-        if (this._btnBox) this._btnBox.on(fgui.Event.CLICK, this._clickRemove, this);\r\n-\r\n-        let aGroup = this._btnBox.getChild(\"grids\").asGroup;\r\n-\r\n-        // for (let i = 0; i < this._btnBox.numChildren; i++) {\r\n-        //     if (this._btnBox.getChildAt(i).group == aGroup) {\r\n-        //         let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n-        //         this._grids.push(grid);\r\n-        //     }\r\n-        // }\r\n-\r\n-        for (let i = this._btnBox.numChildren - 1; i > -1; i--) {\r\n-            if (this._btnBox.getChildAt(i).group == aGroup) {\r\n-                let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n-                this._grids.push(grid);\r\n-            }\r\n-        }\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            drag: \"end\",\r\n-            dragBtn: {\r\n-                x: this._dragBtn.x,\r\n-                y: this._dragBtn.y\r\n-            },\r\n-            title: false,\r\n-            drops: 0,\r\n-            submit: false,\r\n-            answer: false\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { answer, ae } = model.config;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        // 动效注册\r\n-        for (let v in ae) {\r\n-            if (ae[v]) {\r\n-                this[v] = {};\r\n-                if (ae[v].component) this[v].component = fgui.UIPackage.createObject(Package, ae[v].component).asCom;\r\n-                if (ae[v].pos) this[v].pos = ae[v].pos;\r\n-            }\r\n-        }\r\n-\r\n-        if (answer) this._answer = answer;\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    getOriginValue(v: any) {\r\n-        return {\r\n-            x: v.x,\r\n-            y: v.y\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-        evt.captureTouch();\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = \"start\";\r\n-        state.answer = state.drops === this._answer;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-        this._dragging = true;\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let bool: boolean = pointBelongArea(\"rectangle\", this._btnBox, this._dragBtn);\r\n-        if (bool) {\r\n-            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n-            let grid: fgui.GLoader = this._grids.find(v => v.url === null);\r\n-            if (grid) {\r\n-                //grid.url = icon.url;\r\n-                state.drops = state.drops + 1;\r\n-            }\r\n-        }\r\n-\r\n-        state.dragBtn = {\r\n-            x: this._cache[\"dragOrigin\"].x,\r\n-            y: this._cache[\"dragOrigin\"].y,\r\n-        };\r\n-        state.drag = \"end\";\r\n-        state.answer = state.drops === this._answer;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickRemove(evt: any): void {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-\r\n-        let index: number = this._grids.findIndex((v: any) => v.url === null);\r\n-        if (index !== 0) {\r\n-            // let grid: fgui.GLoader = this._grids[index == -1 ? this._grids.length - 1 : index - 1];\r\n-            // grid.url = null;\r\n-\r\n-            state.drops = state.drops - 1;\r\n-            state.answer = state.drops === this._answer;\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.answer = state.drops === this._answer;\r\n-        state.submit = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-        if (state.drag == \"move\") {\r\n-            this._dragBtn.x = state.dragBtn.x;\r\n-            this._dragBtn.y = state.dragBtn.y;\r\n-        }\r\n-\r\n-        if (state.drag == \"end\") {\r\n-            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n-            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n-\r\n-            if (!globalThis._.isEqual(oldState.drops, state.drops)) {\r\n-                for (let i = 0; i < this._grids.length; i++) {\r\n-                    let grid: fgui.GLoader = this._grids[i];\r\n-                    if (state.drops > i) {\r\n-                        if (!grid.url) {\r\n-                            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n-                            grid.url = icon.url;\r\n-                        }\r\n-                    } else {\r\n-                        if (grid.url) grid.url = null;\r\n-                    }\r\n-                }\r\n-                this._c1.selectedIndex = state.drops;\r\n-\r\n-                if (!state.answer) this.onLibraHint();\r\n-            }\r\n-\r\n-            if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-                if (state.submit) {\r\n-                    if (state.drops) {\r\n-                        this.answerFeedback(state.answer);\r\n-                    } else {\r\n-                        this.onHandleGuide();\r\n-                    }\r\n-                }\r\n-            }\r\n-\r\n-            if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-                this.playTitle(state.title);\r\n-            }\r\n-\r\n-        }\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c2.selectedIndex = bool ? 1 : 0;\r\n-\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            state.submit = false;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    // 天枰提示\r\n-    onLibraHint() {\r\n-        if (!this.lineBlink) return;\r\n-        fgui.GRoot.inst.addChild(this.lineBlink.component);\r\n-        if (this.lineBlink.pos) {\r\n-            this.lineBlink.component.x = (fgui.GRoot.inst.width - this.lineBlink.component.width) / 2 + this.lineBlink.pos.x;\r\n-            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2 + this.lineBlink.pos.y;\r\n-        } else {\r\n-            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2;\r\n-        }\r\n-\r\n-        let t: fgui.Transition = this.lineBlink.component.getTransition(\"t0\");\r\n-        t.play(() => {\r\n-            fgui.GRoot.inst.removeChild(this.lineBlink.component);\r\n-        });\r\n-    }\r\n-\r\n-    // 操作提示\r\n-    onHandleGuide() {\r\n-        if (!this.handleGuide) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        fgui.GRoot.inst.addChild(this.handleGuide.component);\r\n-        if (this.handleGuide.pos) {\r\n-            this.handleGuide.component.x = (fgui.GRoot.inst.width - this.handleGuide.component.width) / 2 + this.handleGuide.pos.x;\r\n-            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2 + this.handleGuide.pos.y;\r\n-        } else {\r\n-            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2;\r\n-        }\r\n-\r\n-        let t: fgui.Transition = this.handleGuide.component.getTransition(\"t0\");\r\n-        t.play(() => {\r\n-            fgui.GRoot.inst.removeChild(this.handleGuide.component);\r\n-            state.submit = false;\r\n-            this.updateState(state);\r\n-        }, 2);\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.dragBtn = {\r\n-                x: this._dragBtn.x,\r\n-                y: this._dragBtn.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                }
            ],
            "date": 1624621940902,
            "name": "Commit-0",
            "content": "/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: ydlx\r\n * @Date: 2021-03-26 18:05:12\r\n * @LastEditors: ydlx\r\n * @LastEditTime: 2021-05-20 17:50:34\r\n */\r\nconst { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\nconst { pointBelongArea } = window['GlobalData'].utils;\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class dragAnswer_model01_v1 extends cc.Component {\r\n    private _worldRoot: cc.Node;\r\n    private _view: fgui.GComponent;\r\n    private _c1: fgui.Controller;\r\n    private _c2: fgui.Controller;\r\n\r\n    private _dragBtn: fgui.GButton;\r\n    private _btnBox: fgui.GButton;\r\n    private _submit: fgui.GButton;\r\n    private _title: fgui.GButton;\r\n    private _titleTrigger: fgui.GLoader;\r\n\r\n    // fairygui 组件\r\n    private handleGuide: any;\r\n    private lineBlink: any;\r\n\r\n    // 远程动态组件\r\n    private feedback: any;\r\n\r\n    private _grids = [];\r\n\r\n    private _cache = {};\r\n    private _scheduleTime = .3;\r\n    private _dragging = false;\r\n\r\n    private _answer = 0;\r\n\r\n    private _state = {};\r\n\r\n    get state(): any {\r\n        return this._state;\r\n    }\r\n\r\n    set state(v: any) {\r\n        this.updateUi(this._state, v);\r\n        this._state = v;\r\n        this.mergeState();\r\n    }\r\n\r\n    onLoad() {\r\n        this._worldRoot = cc.find(\"Canvas\").parent;\r\n\r\n        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n        fgui.GRoot.inst.addChild(this._view);\r\n\r\n        this._c1 = this._view.getController(\"c1\");\r\n        this._c2 = this._view.getController(\"c2\");\r\n        // 臨時\r\n        // bug 初始设置不播放不生效\r\n        if (this._c2) {\r\n            this._c2.selectedIndex = 1;\r\n            this._c2.selectedIndex = 0;\r\n        }\r\n\r\n        this._submit = this._view.getChild(\"submit\").asButton;\r\n        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n\r\n        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n\r\n        this._title = this._view.getChild(\"title\").asButton;\r\n\r\n        this._dragBtn = this._view.getChild(\"dragBtn\").asButton;\r\n        this._cache[\"dragOrigin\"] = this.getOriginValue(this._dragBtn);\r\n\r\n        this._dragBtn.draggable = true;\r\n        this._dragBtn.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n        this._dragBtn.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n        this._dragBtn.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n\r\n        this._btnBox = this._view.getChild(\"btnBox\").asButton;\r\n        if (this._btnBox) this._btnBox.on(fgui.Event.CLICK, this._clickRemove, this);\r\n\r\n        let aGroup = this._btnBox.getChild(\"grids\").asGroup;\r\n\r\n        // for (let i = 0; i < this._btnBox.numChildren; i++) {\r\n        //     if (this._btnBox.getChildAt(i).group == aGroup) {\r\n        //         let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n        //         this._grids.push(grid);\r\n        //     }\r\n        // }\r\n\r\n        for (let i = this._btnBox.numChildren - 1; i > -1; i--) {\r\n            if (this._btnBox.getChildAt(i).group == aGroup) {\r\n                let grid: fgui.GLoader = this._btnBox.getChildAt(i).asLoader;\r\n                this._grids.push(grid);\r\n            }\r\n        }\r\n\r\n        // 初始化state\r\n        this._state = {\r\n            drag: \"end\",\r\n            dragBtn: {\r\n                x: this._dragBtn.x,\r\n                y: this._dragBtn.y\r\n            },\r\n            title: false,\r\n            drops: 0,\r\n            submit: false,\r\n            answer: false\r\n        }\r\n\r\n        // 临时 \r\n        // 禁止操作期间 切页\r\n        this.disableForbidHandle();\r\n        // 销毁反馈\r\n        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n        if (feedback) feedback.destroy();\r\n    }\r\n\r\n    async init(data: any) {\r\n        // 临时 model component json 配置加载\r\n        let { pathConfig, model, components } = data;\r\n        let Package = pathConfig.packageName;\r\n        let GComponent = model.uiPath;\r\n        let { answer, ae } = model.config;\r\n\r\n        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n\r\n        // 动效注册\r\n        for (let v in ae) {\r\n            if (ae[v]) {\r\n                this[v] = {};\r\n                if (ae[v].component) this[v].component = fgui.UIPackage.createObject(Package, ae[v].component).asCom;\r\n                if (ae[v].pos) this[v].pos = ae[v].pos;\r\n            }\r\n        }\r\n\r\n        if (answer) this._answer = answer;\r\n        if (components) {\r\n            for (const key in components) {\r\n                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n                let componentBundle: any = await loadBundle(componentPath);\r\n                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n                this[key] = componentPrefab;\r\n            }\r\n        }\r\n    }\r\n\r\n    getOriginValue(v: any) {\r\n        return {\r\n            x: v.x,\r\n            y: v.y\r\n        }\r\n    }\r\n\r\n    private _onDragStart(evt: fgui.Event): void {\r\n        evt.captureTouch();\r\n\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.drag = \"start\";\r\n        state.answer = state.drops === this._answer;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _onDragMove(evt: fgui.Event): void {\r\n        this._dragging = true;\r\n    }\r\n\r\n    private _onDragEnd(evt: fgui.Event): void {\r\n        this._dragging = false;\r\n\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let bool: boolean = pointBelongArea(\"rectangle\", this._btnBox, this._dragBtn);\r\n        if (bool) {\r\n            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n            let grid: fgui.GLoader = this._grids.find(v => v.url === null);\r\n            if (grid) {\r\n                //grid.url = icon.url;\r\n                state.drops = state.drops + 1;\r\n            }\r\n        }\r\n\r\n        state.dragBtn = {\r\n            x: this._cache[\"dragOrigin\"].x,\r\n            y: this._cache[\"dragOrigin\"].y,\r\n        };\r\n        state.drag = \"end\";\r\n        state.answer = state.drops === this._answer;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _clickRemove(evt: any): void {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n\r\n        let index: number = this._grids.findIndex((v: any) => v.url === null);\r\n        if (index !== 0) {\r\n            // let grid: fgui.GLoader = this._grids[index == -1 ? this._grids.length - 1 : index - 1];\r\n            // grid.url = null;\r\n\r\n            state.drops = state.drops - 1;\r\n            state.answer = state.drops === this._answer;\r\n            this.updateState(state);\r\n        }\r\n    }\r\n\r\n    private _clickTitle(evt: any) {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.title = true;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private async _clickSubmit(evt: any) {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.answer = state.drops === this._answer;\r\n        state.submit = true;\r\n        this.updateState(state);\r\n    }\r\n\r\n    // 获取状态\r\n    getState(data: any) {\r\n        this.updateState(data);\r\n    }\r\n\r\n    // 更新状态层\r\n    updateState(curState: any) {\r\n        if (globalThis._.isEqual(this._state, curState)) return;\r\n        this.state = curState;\r\n    }\r\n\r\n    // 更新ui层\r\n    updateUi(oldState: any, state: any) {\r\n        if (state.drag == \"move\") {\r\n            this._dragBtn.x = state.dragBtn.x;\r\n            this._dragBtn.y = state.dragBtn.y;\r\n        }\r\n\r\n        if (state.drag == \"end\") {\r\n            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n\r\n            if (!globalThis._.isEqual(oldState.drops, state.drops)) {\r\n                for (let i = 0; i < this._grids.length; i++) {\r\n                    let grid: fgui.GLoader = this._grids[i];\r\n                    if (state.drops > i) {\r\n                        if (!grid.url) {\r\n                            let icon: fgui.GLoader = this._dragBtn.getChild(\"icon\").asLoader;\r\n                            grid.url = icon.url;\r\n                        }\r\n                    } else {\r\n                        if (grid.url) grid.url = null;\r\n                    }\r\n                }\r\n                this._c1.selectedIndex = state.drops;\r\n\r\n                if (!state.answer) this.onLibraHint();\r\n            }\r\n\r\n            if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n                if (state.submit) {\r\n                    if (state.drops) {\r\n                        this.answerFeedback(state.answer);\r\n                    } else {\r\n                        this.onHandleGuide();\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n                this.playTitle(state.title);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    async playTitle(bool: boolean) {\r\n        this._c2.selectedIndex = bool ? 1 : 0;\r\n\r\n        if (bool) {\r\n            cc.audioEngine.stopAll();\r\n            this.forbidHandle();\r\n            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n            let audioId = cc.audioEngine.play(audio, false, 1);\r\n            cc.audioEngine.setFinishCallback(audioId, () => {\r\n                let state: any = globalThis._.cloneDeep(this._state);\r\n                state.title = false;\r\n                this.updateState(state);\r\n            });\r\n        } else {\r\n            this.disableForbidHandle();\r\n        }\r\n    }\r\n\r\n    answerFeedback(bool: boolean) {\r\n        if (!this.feedback) return;\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let feedback: any = cc.instantiate(this.feedback);\r\n        feedback.x = 960;\r\n        feedback.y = 540;\r\n        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n        feedbackJs.init(bool);\r\n        feedback.parent = cc.find(\"Canvas\").parent;\r\n\r\n        setTimeout(() => {\r\n            feedback.destroy();\r\n            state.submit = false;\r\n            this.updateState(state);\r\n        }, 2000);\r\n    }\r\n\r\n    // 天枰提示\r\n    onLibraHint() {\r\n        if (!this.lineBlink) return;\r\n        fgui.GRoot.inst.addChild(this.lineBlink.component);\r\n        if (this.lineBlink.pos) {\r\n            this.lineBlink.component.x = (fgui.GRoot.inst.width - this.lineBlink.component.width) / 2 + this.lineBlink.pos.x;\r\n            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2 + this.lineBlink.pos.y;\r\n        } else {\r\n            this.lineBlink.component.y = (fgui.GRoot.inst.height - this.lineBlink.component.height) / 2;\r\n        }\r\n\r\n        let t: fgui.Transition = this.lineBlink.component.getTransition(\"t0\");\r\n        t.play(() => {\r\n            fgui.GRoot.inst.removeChild(this.lineBlink.component);\r\n        });\r\n    }\r\n\r\n    // 操作提示\r\n    onHandleGuide() {\r\n        if (!this.handleGuide) return;\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        fgui.GRoot.inst.addChild(this.handleGuide.component);\r\n        if (this.handleGuide.pos) {\r\n            this.handleGuide.component.x = (fgui.GRoot.inst.width - this.handleGuide.component.width) / 2 + this.handleGuide.pos.x;\r\n            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2 + this.handleGuide.pos.y;\r\n        } else {\r\n            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2;\r\n        }\r\n\r\n        let t: fgui.Transition = this.handleGuide.component.getTransition(\"t0\");\r\n        t.play(() => {\r\n            fgui.GRoot.inst.removeChild(this.handleGuide.component);\r\n            state.submit = false;\r\n            this.updateState(state);\r\n        }, 2);\r\n    }\r\n\r\n    // 运行时 禁止操作\r\n    forbidHandle() {\r\n        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n        if (!handleMask) {\r\n            let handleMask = new cc.Node('handleMask');\r\n            handleMask.addComponent(cc.BlockInputEvents);\r\n            handleMask.parent = this._worldRoot;\r\n            handleMask.width = 1920;\r\n            handleMask.height = 1080;\r\n            handleMask.x = 960;\r\n            handleMask.y = 540;\r\n        }\r\n    }\r\n\r\n    // 消除禁止\r\n    disableForbidHandle() {\r\n        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n        if (handleMask) handleMask.destroy();\r\n    }\r\n\r\n    // 临时\r\n    // 拖拽定时器\r\n    dragSchedule() {\r\n        if (this._dragging) {\r\n            let state: any = globalThis._.cloneDeep(this._state);\r\n            state.drag = \"move\";\r\n            state.dragBtn = {\r\n                x: this._dragBtn.x,\r\n                y: this._dragBtn.y,\r\n            };\r\n            this.updateState(state);\r\n        }\r\n    }\r\n\r\n    // 注册状态，及获取状态的方法\r\n    registerState() {\r\n        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n    }\r\n\r\n    // 解除状态，及获取状态的方法\r\n    relieveState() {\r\n        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n    }\r\n\r\n    // 本组件状态合并到全局\r\n    mergeState() {\r\n        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n    }\r\n\r\n    onEnable() {\r\n        this.registerState();\r\n        this.schedule(this.dragSchedule, this._scheduleTime);\r\n    }\r\n\r\n    onDisable() {\r\n        this.relieveState();\r\n        cc.audioEngine.stopAll();\r\n    }\r\n}\r\n"
        }
    ]
}