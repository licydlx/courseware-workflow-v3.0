{
    "sourceFile": "assets/prefabLibrary/models/dragAnswer/dragAnswer-model01-v2.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1624701923817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1624701923817,
            "name": "Commit-0",
            "content": "/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: ydlx\r\n * @Date: 2021-05-07 14:34:26\r\n * @LastEditors: ydlx\r\n * @LastEditTime: 2021-05-26 16:23:56\r\n */\r\nconst { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class dragAnswer_model01_v2 extends cc.Component {\r\n    private _worldRoot: cc.Node;\r\n    private _view: fgui.GComponent;\r\n\r\n    private _c1: fgui.Controller;\r\n    private _c2: fgui.Controller;\r\n\r\n    private _submit: fgui.GButton;\r\n\r\n    private _title: fgui.GButton;\r\n\r\n    private _titleTrigger: fgui.GLoader;\r\n\r\n    // fairygui 组件\r\n    private handleGuide: any;\r\n    private lineBlink: any;\r\n\r\n    // 远程动态组件\r\n    private feedback: any;\r\n\r\n    private _colliderBox = [];\r\n    private _collideredBox = [];\r\n\r\n    private _cache = {};\r\n    private _scheduleTime = .3;\r\n    private _dragging = false;\r\n\r\n    private _answer = 0;\r\n\r\n    private _state = {};\r\n\r\n    get state(): any {\r\n        return this._state;\r\n    }\r\n\r\n    set state(v: any) {\r\n        this.updateUi(this._state, v);\r\n        this._state = v;\r\n        this.mergeState();\r\n    }\r\n\r\n    onLoad() {\r\n        this._worldRoot = cc.find(\"Canvas\").parent;\r\n\r\n        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n        fgui.GRoot.inst.addChild(this._view);\r\n\r\n        this._c1 = this._view.getController(\"c1\");\r\n        this._c2 = this._view.getController(\"c2\");\r\n        // 臨時\r\n        // bug 初始设置不播放不生效\r\n        if (this._c2) {\r\n            this._c2.selectedIndex = 1;\r\n            this._c2.selectedIndex = 0;\r\n        }\r\n\r\n        this._submit = this._view.getChild(\"submit\").asButton;\r\n        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n\r\n        this._title = this._view.getChild(\"title\").asButton;\r\n        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n\r\n        let colliderGroup = this._view.getChild(\"colliderBox\").asGroup;\r\n        let collideredGroup = this._view.getChild(\"collideredBox\").asGroup;\r\n\r\n        this._cache[\"colliderBox\"] = [];\r\n        for (let i = 0; i < this._view.numChildren; i++) {\r\n            if (this._view.getChildAt(i).group == colliderGroup) {\r\n                let btn: fgui.GButton = this._view.getChildAt(i).asButton;\r\n                this._cache[\"colliderBox\"].push({ x: btn.x, y: btn.y, belong: null });\r\n                btn.draggable = true;\r\n                btn.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n                btn.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n                btn.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n                this._colliderBox.push(btn);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this._view.numChildren; i++) {\r\n            if (this._view.getChildAt(i).group == collideredGroup) {\r\n                let btn: fgui.GButton = this._view.getChildAt(i).asButton;\r\n                this._collideredBox.push(btn);\r\n            }\r\n        }\r\n\r\n        // 初始化state\r\n        this._state = {\r\n            drag: \"end\",\r\n            collider: this._cache[\"colliderBox\"].map((v: any) => v),\r\n            colliderIndex: null,\r\n            title: false,\r\n            submit: false,\r\n            answer: false\r\n        }\r\n\r\n\r\n        // 临时 \r\n        // 禁止操作期间 切页\r\n        this.disableForbidHandle();\r\n        // 销毁反馈\r\n        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n        if (feedback) feedback.destroy();\r\n    }\r\n\r\n    async init(data: any) {\r\n        // 临时 model component json 配置加载\r\n        let { pathConfig, model, components } = data;\r\n        let Package = pathConfig.packageName;\r\n\r\n\r\n        if (model.uiPath) {\r\n            let GComponent = model.uiPath;\r\n            this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n        }\r\n\r\n        if (model.config) {\r\n            let { answer, ae } = model.config;\r\n            if (answer) this._answer = answer;\r\n            // 动效注册\r\n            if (ae) {\r\n                for (let v in ae) {\r\n                    if (ae[v]) {\r\n                        this[v] = {};\r\n                        if (ae[v].component) this[v].component = fgui.UIPackage.createObject(Package, ae[v].component).asCom;\r\n                        if (ae[v].pos) this[v].pos = ae[v].pos;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (components) {\r\n            for (const key in components) {\r\n                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n                let componentBundle: any = await loadBundle(componentPath);\r\n                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n                this[key] = componentPrefab;\r\n            }\r\n        }\r\n    }\r\n\r\n    getOriginValue(v: any) {\r\n        return {\r\n            x: v.x,\r\n            y: v.y\r\n        }\r\n    }\r\n\r\n    private _onDragStart(evt: fgui.Event): void {\r\n        evt.captureTouch();\r\n        this.playSound('ui://ik5aab9iht4324');\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let collider: any = fgui.GObject.cast(evt.currentTarget);\r\n        let colliderIndex: number = this._colliderBox.findIndex((v: any) => v == collider);\r\n        state.colliderIndex = colliderIndex;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _onDragMove(evt: fgui.Event): void {\r\n        this._dragging = true;\r\n    }\r\n\r\n    private _onDragEnd(evt: fgui.Event): void {\r\n        // 临时\r\n        // 两个被拖拽物 同时被松开 会触发2次回调\r\n        if (!this._dragging) return;\r\n        this._dragging = false;\r\n\r\n        let collider: any = fgui.GObject.cast(evt.currentTarget);\r\n        let colliderIndex: number = this._colliderBox.findIndex((v: any) => v == collider);\r\n\r\n        let arr: any = [];\r\n        let collidered: any;\r\n        this._collideredBox.forEach((v: any, i: any) => {\r\n            if (this._belongArea(collider, v, 110) == true) arr.push(v);\r\n        });\r\n\r\n        arr.forEach((v: any, i: any) => {\r\n            if (i == 0) {\r\n                collidered = v;\r\n            } else {\r\n                let pd = this._getDistance(collider, arr[i - 1]);\r\n                let cd = this._getDistance(collider, v);\r\n                if (cd < pd) collidered = v;\r\n            }\r\n        });\r\n\r\n        let collideredIndex: number = this._collideredBox.findIndex((v: any) => v == collidered);\r\n\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        if (collideredIndex == -1) {\r\n            state.collider[colliderIndex] = {\r\n                x: this._cache[\"colliderBox\"][colliderIndex].x,\r\n                y: this._cache[\"colliderBox\"][colliderIndex].y,\r\n                belong: null,\r\n            }\r\n        } else {\r\n            let x: number = this._collideredBox[collideredIndex].x + this._collideredBox[collideredIndex].width / 2 - this._colliderBox[colliderIndex].width / 2;\r\n            let y: number = this._collideredBox[collideredIndex].y + this._collideredBox[collideredIndex].height / 2 - this._colliderBox[colliderIndex].height / 2;\r\n            let bool: boolean = state.collider.find((v: any) => v.x == x && Math.abs(v.y - y) < 55);\r\n\r\n            state.collider[colliderIndex] = {\r\n                x: bool ? this._cache[\"colliderBox\"][colliderIndex].x : x,\r\n                y: bool ? this._cache[\"colliderBox\"][colliderIndex].y : y,\r\n                belong: bool ? null : collideredIndex,\r\n            }\r\n        }\r\n\r\n        // let answerBool: boolean = state.collider.every((v: any, i: any) => !globalThis._.isEqual(v, this._cache[\"colliderBox\"][i]));\r\n        // state.answer = answerBool;\r\n        // if (answerBool) {\r\n        //     state.submit = true;\r\n        // }\r\n\r\n        state.submit = false;\r\n        state.drag = \"end\";\r\n        state.colliderIndex = colliderIndex;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _clickTitle(evt: any) {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.title = true;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _clickSubmit(evt: any) {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let answer: any = state.collider.map((v: any) => v.belong).filter((v: any) => v || v === 0).join(\"\");\r\n        state.answer = answer == this._answer;\r\n        state.submit = true;\r\n        this.updateState(state);\r\n    }\r\n\r\n    // 获取状态\r\n    getState(data: any) {\r\n        this.updateState(data);\r\n    }\r\n\r\n    // 更新状态层\r\n    updateState(curState: any) {\r\n        if (globalThis._.isEqual(this._state, curState)) return;\r\n        this.state = curState;\r\n    }\r\n\r\n    // 更新ui层\r\n    updateUi(oldState: any, state: any) {\r\n        if (state.drag == \"move\") {\r\n            this._colliderBox[state.colliderIndex].x = state.collider[state.colliderIndex].x;\r\n            this._colliderBox[state.colliderIndex].y = state.collider[state.colliderIndex].y;\r\n        }\r\n\r\n        if (state.drag == \"end\") {\r\n            if (!globalThis._.isEqual(oldState.collider, state.collider)) {\r\n                for (let i = 0; i < state.collider.length; i++) {\r\n                    // 放置声\r\n                    if (state.collider[i].x != this._colliderBox[i].x && this._colliderBox[i].y != state.collider[i].y) {\r\n                        this.playPlace();\r\n                    }\r\n                    this._colliderBox[i].x = state.collider[i].x;\r\n                    this._colliderBox[i].y = state.collider[i].y;\r\n                }\r\n            }\r\n\r\n            if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n                this.playTitle(state.title);\r\n            }\r\n\r\n            if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n                if (state.submit) {\r\n                    // 根据collider 初始位置 判断 是否被操作过\r\n                    let nv: any = this._colliderBox.map((v: any) => { return { \"x\": v.x, \"y\": v.y } });\r\n                    let bool: boolean = this._cache[\"colliderBox\"].every((v: any, i: any) => v.x == nv[i].x && v.y == nv[i].y);\r\n                    bool ? this.onHandleGuide() : this.onFlicker(state.answer);\r\n                } else {\r\n                    this.disableForbidHandle();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    playSound(url: string) {\r\n        let s = this;\r\n        let item = fgui.UIPackage.getItemByURL(url);\r\n        loadResource(item.file, cc.AudioClip).then((audio: cc.AudioClip) => {\r\n            cc.audioEngine.play(audio, false, 1);\r\n        });\r\n    }\r\n\r\n    // 播放 放置声效\r\n    async playPlace() {\r\n        cc.audioEngine.stopAll();\r\n        let place = this._view.getChild(\"place\").asButton;\r\n        if (place) {\r\n            let item = fgui.UIPackage.getItemByURL(place[\"_sound\"]);\r\n            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n            cc.audioEngine.play(audio, false, 1);\r\n        }\r\n    }\r\n\r\n    async playTitle(bool: boolean) {\r\n        this._c2.selectedIndex = bool ? 1 : 0;\r\n        if (bool) {\r\n            cc.audioEngine.stopAll();\r\n            this.forbidHandle();\r\n            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n            let audioId = cc.audioEngine.play(audio, false, 1);\r\n            cc.audioEngine.setFinishCallback(audioId, () => {\r\n                let state: any = globalThis._.cloneDeep(this._state);\r\n                state.title = false;\r\n                this.updateState(state);\r\n            });\r\n        } else {\r\n            this.disableForbidHandle();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @name: 获取距离\r\n     * @msg: \r\n     * @param {any} self\r\n     * @param {any} area\r\n     * @return {*}\r\n     */\r\n    private _getDistance(self: any, area: any) {\r\n        let width = (self.x + self.width / 2) - (area.x + area.width / 2);\r\n        let height = (self.y + self.height / 2) - (area.y + area.height / 2);\r\n        let distance = Math.sqrt(width * width + height * height);\r\n        return distance;\r\n    }\r\n\r\n    /**\r\n     * @name: 区域所属判断\r\n     * @msg: \r\n     * @param {any} self\r\n     * @param {any} area\r\n     * @param {number} gap\r\n     * @return {*}\r\n     */\r\n    private _belongArea(self: any, area: any, gap: number = 10) {\r\n        let width = (self.x + self.width / 2) - (area.x + area.width / 2);\r\n        let height = (self.y + self.height / 2) - (area.y + area.height / 2);\r\n        let distance = Math.sqrt(width * width + height * height);\r\n        return distance < gap;\r\n    }\r\n\r\n    answerFeedback(bool: boolean) {\r\n        if (!this.feedback) return;\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let feedback: any = cc.instantiate(this.feedback);\r\n        feedback.x = 960;\r\n        feedback.y = 540;\r\n        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n        feedbackJs.init(bool);\r\n        feedback.parent = cc.find(\"Canvas\").parent;\r\n\r\n        setTimeout(() => {\r\n            feedback.destroy();\r\n            state.submit = false;\r\n            this.updateState(state);\r\n        }, 2000);\r\n    }\r\n\r\n    // 格子闪烁 提示\r\n    onFlicker(answer: any) {\r\n        if (answer) {\r\n            let t: fgui.Transition = this._view.getTransition(\"t0\");\r\n            t.play(() => {\r\n                this.answerFeedback(answer);\r\n            });\r\n        } else {\r\n            this.answerFeedback(answer);\r\n        }\r\n    }\r\n\r\n    // 操作提示\r\n    onHandleGuide() {\r\n        if (!this.handleGuide) return;\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        fgui.GRoot.inst.addChild(this.handleGuide.component);\r\n        if (this.handleGuide.pos) {\r\n            this.handleGuide.component.x = (fgui.GRoot.inst.width - this.handleGuide.component.width) / 2 + this.handleGuide.pos.x;\r\n            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2 + this.handleGuide.pos.y;\r\n        } else {\r\n            this.handleGuide.component.y = (fgui.GRoot.inst.height - this.handleGuide.component.height) / 2;\r\n        }\r\n\r\n        let t: fgui.Transition = this.handleGuide.component.getTransition(\"t0\");\r\n        t.play(() => {\r\n            fgui.GRoot.inst.removeChild(this.handleGuide.component);\r\n            state.submit = false;\r\n            this.updateState(state);\r\n        }, 2);\r\n    }\r\n\r\n    // 运行时 禁止操作\r\n    forbidHandle() {\r\n        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n        if (!handleMask) {\r\n            let handleMask = new cc.Node('handleMask');\r\n            handleMask.addComponent(cc.BlockInputEvents);\r\n            handleMask.parent = this._worldRoot;\r\n            handleMask.width = 1920;\r\n            handleMask.height = 1080;\r\n            handleMask.x = 960;\r\n            handleMask.y = 540;\r\n        }\r\n    }\r\n\r\n    // 消除禁止\r\n    disableForbidHandle() {\r\n        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n        if (handleMask) handleMask.destroy();\r\n    }\r\n\r\n    // 临时\r\n    // 拖拽定时器\r\n    dragSchedule() {\r\n        if (this._dragging) {\r\n            let state: any = globalThis._.cloneDeep(this._state);\r\n            state.drag = \"move\";\r\n            state.collider[state.colliderIndex] = {\r\n                x: this._colliderBox[state.colliderIndex].x,\r\n                y: this._colliderBox[state.colliderIndex].y,\r\n            };\r\n            this.updateState(state);\r\n        }\r\n    }\r\n\r\n    // 注册状态，及获取状态的方法\r\n    registerState() {\r\n        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n    }\r\n\r\n    // 解除状态，及获取状态的方法\r\n    relieveState() {\r\n        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n    }\r\n\r\n    // 本组件状态合并到全局\r\n    mergeState() {\r\n        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n    }\r\n\r\n    onEnable() {\r\n        this.registerState();\r\n        this.schedule(this.dragSchedule, this._scheduleTime);\r\n    }\r\n\r\n    onDisable() {\r\n        this.relieveState();\r\n        cc.audioEngine.stopAll();\r\n    }\r\n}\r\n"
        }
    ]
}