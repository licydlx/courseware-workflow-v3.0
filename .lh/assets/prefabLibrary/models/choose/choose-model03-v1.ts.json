{
    "sourceFile": "assets/prefabLibrary/models/choose/choose-model03-v1.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 350,
            "patches": [
                {
                    "date": 1623989407691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1623991110346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,564 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+\r\n+                if (!this._isAnimateShow) {\r\n+\r\n+                    if (Object.keys(this._options).length <= 2) {\r\n+                        let item = fgui.UIPackage.getItemByURL(btn.sound);\r\n+                        this._rightSoundFile.push(item);\r\n+                    }\r\n+                }\r\n+\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        console.log('==== isAnimateShow  ====' + isAnimateShow);\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        } else {\r\n+\r\n+            item = fgui.UIPackage.getItemByURL(btn.asButton.sound);\r\n+        }\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                // this._maskBg.visible = false;\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623991163936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,17 +118,8 @@\n                 }\r\n \r\n                 btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n                 this._options[btn.name] = btn;\r\n-\r\n-                if (!this._isAnimateShow) {\r\n-\r\n-                    if (Object.keys(this._options).length <= 2) {\r\n-                        let item = fgui.UIPackage.getItemByURL(btn.sound);\r\n-                        this._rightSoundFile.push(item);\r\n-                    }\r\n-                }\r\n-\r\n             }\r\n         }\r\n \r\n         let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n@@ -183,10 +174,8 @@\n         this._package = Package;\r\n \r\n         this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n \r\n-        console.log('==== isAnimateShow  ====' + isAnimateShow);\r\n-\r\n         if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n         if (soundFile) this._soundFile = soundFile;\r\n         if (rightSoundFile) {\r\n \r\n@@ -561,568 +550,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-\r\n-                if (!this._isAnimateShow) {\r\n-\r\n-                    if (Object.keys(this._options).length <= 2) {\r\n-                        let item = fgui.UIPackage.getItemByURL(btn.sound);\r\n-                        this._rightSoundFile.push(item);\r\n-                    }\r\n-                }\r\n-\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        console.log('==== isAnimateShow  ====' + isAnimateShow);\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        } else {\r\n-\r\n-            item = fgui.UIPackage.getItemByURL(btn.asButton.sound);\r\n-        }\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                // this._maskBg.visible = false;\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1623991203507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,553 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        } else {\r\n+\r\n+            item = fgui.UIPackage.getItemByURL(btn.asButton.sound);\r\n+        }\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                // this._maskBg.visible = false;\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623991312571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,15 +378,9 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         let btn = this._options[name];\r\n         let item = null;\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        } else {\r\n-\r\n-            item = fgui.UIPackage.getItemByURL(btn.asButton.sound);\r\n-        }\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n         if (this._isAnimateShow) {\r\n \r\n@@ -550,557 +544,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        } else {\r\n-\r\n-            item = fgui.UIPackage.getItemByURL(btn.asButton.sound);\r\n-        }\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                // this._maskBg.visible = false;\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1623991655279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,547 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                // this._maskBg.visible = false;\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623991890536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,547 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                // this._maskBg.visible = false;\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623991912401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,555 +51,10 @@\n     private _clickSound: cc.AudioClip;\r\n \r\n     private _dragSound: cc.AudioClip;\r\n \r\n-    private submitType: any = cc.Enum({\r\n+    private _laba2: fgui.GLoader3D;\r\n \r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                // this._maskBg.visible = false;\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n         GuideShow: 1,\r\n@@ -1091,551 +546,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                // this._maskBg.visible = false;\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1623991935626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n \r\n         this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n         if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n+        this._laba2 = this._view.getChild(\"labaguai\").asButton;\r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n \r\n         this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n"
                },
                {
                    "date": 1623991953544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,9 +139,10 @@\n \r\n         this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n         if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n-        this._laba2 = this._view.getChild(\"labaguai\").asButton;\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+\r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n \r\n         this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n"
                },
                {
                    "date": 1623991969144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,9 @@\n         this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n         if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n \r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n \r\n"
                },
                {
                    "date": 1623991985213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,9 @@\n         if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n         this._laba2.animationName = 'idle';\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n \r\n"
                },
                {
                    "date": 1623991992045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n         if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n         this._laba2.animationName = 'idle';\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n \r\n"
                },
                {
                    "date": 1623992046681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,8 +424,9 @@\n             console.log('===== playLaBaGuai 111 ====' + bool);\r\n             cc.audioEngine.stopAll();\r\n             this.forbidHandle();\r\n             let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n             this.playRightSound(curIndex);\r\n \r\n         } else {\r\n             this.disableForbidHandle();\r\n@@ -438,10 +439,9 @@\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n-                // this._maskBg.visible = false;\r\n-\r\n+                this._laba2.animationName = 'play';\r\n                 let state: any = globalThis._.cloneDeep(this._state);\r\n                 state.laBaGuaiPlay = false;\r\n                 this.updateState(state);\r\n \r\n"
                },
                {
                    "date": 1623992054486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,9 +439,9 @@\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n-                this._laba2.animationName = 'play';\r\n+                this._laba2.animationName = 'idle';\r\n                 let state: any = globalThis._.cloneDeep(this._state);\r\n                 state.laBaGuaiPlay = false;\r\n                 this.updateState(state);\r\n \r\n"
                },
                {
                    "date": 1623992146435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,553 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623992313487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,553 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623992365062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,553 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623992373118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -550,1663 +550,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1623992401536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,553 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+    private _c2: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips2(this._labaguai);\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            });\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * 点击指引\r\n+     * @param obj 点击对象\r\n+     */\r\n+    handTips2(obj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        let tempX = obj.x + obj.width / 2;\r\n+        let tempY = obj.y + obj.height / 2;\r\n+\r\n+        hand.x = tempX;\r\n+        hand.y = tempY;\r\n+\r\n+        cc.tween(hand).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).to(0.3, {\r\n+            x: tempX - 30,\r\n+            y: tempY - 30\r\n+        }).to(0.3, {\r\n+            x: tempX,\r\n+            y: tempY\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623992432579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,561 +393,12 @@\n             let btnTemp = btn as fgui.GLoader3D;\r\n             btnTemp.animationName = this._animateName[btn.name].play;\r\n             cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n                 let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n+                state.clickPlayName = '';\r\n                 this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n \r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n-\r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips2(this._labaguai);\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n                 console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n             });\r\n         }\r\n"
                },
                {
                    "date": 1623992473299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,23 +387,27 @@\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n \r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            });\r\n-        }\r\n+            if (this._isAnimateShow) {\r\n \r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].play;\r\n+\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+\r\n+            console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+            btnTemp.animationName = this._animateName[btn.name].idle;\r\n+        });\r\n+\r\n     }\r\n \r\n     async playTitle(bool: boolean) {\r\n         this._c1.selectedIndex = bool ? 1 : 0;\r\n"
                },
                {
                    "date": 1623992481643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,17 +395,18 @@\n             if (this._isAnimateShow) {\r\n \r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n                 btnTemp.animationName = this._animateName[btn.name].play;\r\n+                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n \r\n             }\r\n \r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n             state.clickPlayName = '';\r\n             this.updateState(state);\r\n \r\n-            console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n-            btnTemp.animationName = this._animateName[btn.name].idle;\r\n+\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1623992498599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,16 +387,22 @@\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n \r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n \r\n+\r\n+        }\r\n+\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n             if (this._isAnimateShow) {\r\n \r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].play;\r\n+\r\n                 console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n \r\n             }\r\n"
                },
                {
                    "date": 1623992503780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,10 +391,8 @@\n         if (this._isAnimateShow) {\r\n \r\n             let btnTemp = btn as fgui.GLoader3D;\r\n             btnTemp.animationName = this._animateName[btn.name].play;\r\n-\r\n-\r\n         }\r\n \r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n@@ -403,9 +401,8 @@\n                 let btnTemp = btn as fgui.GLoader3D;\r\n \r\n                 console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n-\r\n             }\r\n \r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n             state.clickPlayName = '';\r\n"
                },
                {
                    "date": 1623992508848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,10 +398,8 @@\n \r\n             if (this._isAnimateShow) {\r\n \r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n-\r\n-                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n             }\r\n \r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n"
                },
                {
                    "date": 1623992514989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,10 +404,8 @@\n \r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n             state.clickPlayName = '';\r\n             this.updateState(state);\r\n-\r\n-\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1623992574735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n export default class choose_model03_v1 extends cc.Component {\r\n     private _worldRoot: cc.Node;\r\n     private _view: fgui.GComponent;\r\n     private _c1: fgui.Controller;\r\n-    private _c2: fgui.Controller;\r\n \r\n     private _submit: fgui.GButton;\r\n     private _title: fgui.GButton;\r\n     private _titleTrigger: fgui.GLoader;\r\n"
                },
                {
                    "date": 1623992593136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,15 +52,16 @@\n     private _dragSound: cc.AudioClip;\r\n \r\n     private _laba2: fgui.GLoader3D;\r\n \r\n-    private submitType: any = cc.Enum({\r\n+    private _guideName:\r\n+        private submitType: any = cc.Enum({\r\n \r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n+            No: 0,\r\n+            GuideShow: 1,\r\n+            WrongFeed: 2,\r\n+            RightFeed: 3\r\n+        });\r\n \r\n     // 远程动态组件\r\n     private feedback: any;\r\n \r\n"
                },
                {
                    "date": 1623992601321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,17 +52,18 @@\n     private _dragSound: cc.AudioClip;\r\n \r\n     private _laba2: fgui.GLoader3D;\r\n \r\n-    private _guideName:\r\n-        private submitType: any = cc.Enum({\r\n+    private _guideName: string;\r\n \r\n-            No: 0,\r\n-            GuideShow: 1,\r\n-            WrongFeed: 2,\r\n-            RightFeed: 3\r\n-        });\r\n+    private submitType: any = cc.Enum({\r\n \r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n     // 远程动态组件\r\n     private feedback: any;\r\n \r\n     private _state = {};\r\n"
                },
                {
                    "date": 1623992736702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n         // 临时 model component json 配置加载\r\n         let { pathConfig, model, components } = data;\r\n         let Package = pathConfig.packageName;\r\n         let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n         this._package = Package;\r\n \r\n         this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n \r\n@@ -201,8 +201,9 @@\n                 this._optionsRect[key] = tempRect;\r\n             }\r\n         }\r\n \r\n+        if (guideName) this._guideName = guideName;\r\n         let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n         this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n         item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n"
                },
                {
                    "date": 1623992765758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,9 @@\n             }\r\n         }\r\n \r\n         if (guideName) this._guideName = guideName;\r\n+\r\n         let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n         this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n         item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n@@ -481,8 +482,30 @@\n             this.updateState(state);\r\n         }, 2000);\r\n     }\r\n \r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let s = this;\r\n+        let hand = fgui.UIPackage.createObject(s._packName, 'hand');\r\n+        s._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(2, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            s._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = false;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n \r\n     /**\r\n      * 点击指引\r\n      * @param obj 点击对象\r\n"
                },
                {
                    "date": 1623992779091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -489,9 +489,9 @@\n          * @param toObj end\r\n          */\r\n     handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n         let s = this;\r\n-        let hand = fgui.UIPackage.createObject(s._packName, 'hand');\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         s._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n         cc.tween(hand).to(2, {\r\n"
                },
                {
                    "date": 1623992808152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-                this.handTips2(this._labaguai);\r\n+                this.handTips2(this._options[this._guideName], this._magicPen);\r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n@@ -488,9 +488,8 @@\n          * @param fromObj start\r\n          * @param toObj end\r\n          */\r\n     handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let s = this;\r\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         s._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n"
                },
                {
                    "date": 1623992813372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-                this.handTips2(this._options[this._guideName], this._magicPen);\r\n+                this.handTips1(this._options[this._guideName], this._magicPen);\r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n"
                },
                {
                    "date": 1623992823440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,8 +326,9 @@\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n                 this.handTips1(this._options[this._guideName], this._magicPen);\r\n+\r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n@@ -489,16 +490,16 @@\n          * @param toObj end\r\n          */\r\n     handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        s._view.addChild(hand);\r\n+        this._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n         cc.tween(hand).to(2, {\r\n             x: toObj.x,\r\n             y: toObj.y\r\n         }).call(() => {\r\n-            s._view.removeChild(hand);\r\n+            this._view.removeChild(hand);\r\n             hand = null;\r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n             state.submit = false;\r\n             this.updateState(state)\r\n"
                },
                {
                    "date": 1623992832492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,9 +500,9 @@\n         }).call(() => {\r\n             this._view.removeChild(hand);\r\n             hand = null;\r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = false;\r\n+            state.submit = this.submitType.No;\r\n             this.updateState(state)\r\n         }).start();\r\n     }\r\n \r\n"
                },
                {
                    "date": 1623992838436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -505,42 +505,9 @@\n             this.updateState(state)\r\n         }).start();\r\n     }\r\n \r\n-    /**\r\n-     * 点击指引\r\n-     * @param obj 点击对象\r\n-     */\r\n-    handTips2(obj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        let tempX = obj.x + obj.width / 2;\r\n-        let tempY = obj.y + obj.height / 2;\r\n \r\n-        hand.x = tempX;\r\n-        hand.y = tempY;\r\n-\r\n-        cc.tween(hand).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).to(0.3, {\r\n-            x: tempX - 30,\r\n-            y: tempY - 30\r\n-        }).to(0.3, {\r\n-            x: tempX,\r\n-            y: tempY\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n     // 运行时 禁止操作\r\n     forbidHandle() {\r\n         let handleMask = this._worldRoot.getChildByName('handleMask');\r\n         if (!handleMask) {\r\n"
                },
                {
                    "date": 1623992848389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -493,9 +493,9 @@\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         this._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n-        cc.tween(hand).to(2, {\r\n+        cc.tween(hand).to(0.8, {\r\n             x: toObj.x,\r\n             y: toObj.y\r\n         }).call(() => {\r\n             this._view.removeChild(hand);\r\n"
                },
                {
                    "date": 1623992908642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,553 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskBg: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n+        this._maskBg.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: ''\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._options[this._magicPen, this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            console.log('===== playLaBaGuai 111 ====' + bool);\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1623992920905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,561 +325,8 @@\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-                this.handTips1(this._options[this._magicPen, this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskBg: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n                 this.handTips1(this._options[this._guideName], this._magicPen);\r\n \r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n@@ -1046,9 +493,9 @@\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         this._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n+        cc.tween(hand).to(0.5, {\r\n             x: toObj.x,\r\n             y: toObj.y\r\n         }).call(() => {\r\n             this._view.removeChild(hand);\r\n"
                },
                {
                    "date": 1623992931267,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-                this.handTips1(this._options[this._guideName], this._magicPen);\r\n+                this.handTips1(this._options[this._guideName]);\r\n \r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n"
                },
                {
                    "date": 1623992936439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-                this.handTips1(this._options[this._guideName]);\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n \r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n"
                },
                {
                    "date": 1623992963639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -493,9 +493,9 @@\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         this._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.5, {\r\n+        cc.tween(hand).to(1.0, {\r\n             x: toObj.x,\r\n             y: toObj.y\r\n         }).call(() => {\r\n             this._view.removeChild(hand);\r\n"
                },
                {
                    "date": 1623992979213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -493,9 +493,9 @@\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         this._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n         hand.y = fromObj.y;\r\n-        cc.tween(hand).to(1.0, {\r\n+        cc.tween(hand).to(0.8, {\r\n             x: toObj.x,\r\n             y: toObj.y\r\n         }).call(() => {\r\n             this._view.removeChild(hand);\r\n"
                },
                {
                    "date": 1623993541539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -432,9 +432,8 @@\n     }\r\n \r\n     playLaBaGuai(bool: boolean) {\r\n         if (bool) {\r\n-            console.log('===== playLaBaGuai 111 ====' + bool);\r\n             cc.audioEngine.stopAll();\r\n             this.forbidHandle();\r\n             let curIndex = 0;\r\n             this._laba2.animationName = 'play';\r\n"
                },
                {
                    "date": 1623993562420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     private _optionsRect = {};\r\n \r\n     private _package: any;\r\n \r\n-    private _maskBg: fgui.GGraph;\r\n+    private _maskOver: fgui.GGraph;\r\n \r\n     private _labaguai: fgui.GButton;\r\n \r\n     private _isAnimateShow: boolean = false;\r\n"
                },
                {
                    "date": 1623993597177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,10 @@\n             this._c1.selectedIndex = 1;\r\n             this._c1.selectedIndex = 0;\r\n         }\r\n \r\n-        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n-        this._maskBg.visible = false;\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n@@ -160,9 +160,10 @@\n             laBaGuaiPlay: false,\r\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n-            clickPlayName: ''\r\n+            clickPlayName: '',\r\n+            _maskOver: false\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n"
                },
                {
                    "date": 1623993623189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n-            _maskOver: false\r\n+            maskOver: false\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n@@ -299,8 +299,9 @@\n             let submitNamesTemp = submitNames.sort();\r\n             let right = this._rigthName.sort();\r\n             if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n                 state.submit = this.submitType.RightFeed;\r\n+                state.maskOver\r\n \r\n             } else {\r\n                 state.submit = this.submitType.WrongFeed;\r\n             }\r\n"
                },
                {
                    "date": 1623993628821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,9 +299,9 @@\n             let submitNamesTemp = submitNames.sort();\r\n             let right = this._rigthName.sort();\r\n             if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n                 state.submit = this.submitType.RightFeed;\r\n-                state.maskOver\r\n+                state.maskOver = true;\r\n \r\n             } else {\r\n                 state.submit = this.submitType.WrongFeed;\r\n             }\r\n"
                },
                {
                    "date": 1623993653253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,8 +337,23 @@\n                 this.answerFeedback(true);\r\n             }\r\n         }\r\n \r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n"
                },
                {
                    "date": 1623993683054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -337,21 +337,11 @@\n                 this.answerFeedback(true);\r\n             }\r\n         }\r\n \r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n \r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n+            this._maskOver.visible = state.maskOver;\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n"
                },
                {
                    "date": 1624343871136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,562 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGraph;\r\n+\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624343891736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,10 @@\n     private _laba2: fgui.GLoader3D;\r\n \r\n     private _guideName: string;\r\n \r\n+    private _overAnimShow: fgui.GGroup;\r\n+\r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n         GuideShow: 1,\r\n@@ -559,563 +561,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624343904233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n \r\n         this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n         this._maskOver.visible = false;\r\n \r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGraph;\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n"
                },
                {
                    "date": 1624343936804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,10 @@\n \r\n     private _guideName: string;\r\n \r\n     private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n \r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n@@ -99,10 +101,11 @@\n         this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n         this._maskOver.visible = false;\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n-\r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n         this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n"
                },
                {
                    "date": 1624343948039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,10 @@\n         this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n         this._maskOver.visible = false;\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overGu = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n"
                },
                {
                    "date": 1624343980827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,10 @@\n         this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n         this._maskOver.visible = false;\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overGu = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overAnimShow\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overAnimShow\") as fgui.GLoader3D;\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n"
                },
                {
                    "date": 1624343994964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,10 @@\n         this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n         this._maskOver.visible = false;\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overAnimShow\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overAnimShow\") as fgui.GLoader3D;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n"
                },
                {
                    "date": 1624344029149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,12 @@\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n         this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n         this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n \r\n+        btn.animationName = this._animateName[btn.name].idle;\r\n+        btn.skinName = this._animateName[btn.name].skin;\r\n+        btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n         this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n"
                },
                {
                    "date": 1624344034665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,11 +104,11 @@\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n         this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n         this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n \r\n-        btn.animationName = this._animateName[btn.name].idle;\r\n-        btn.skinName = this._animateName[btn.name].skin;\r\n-        btn.url = \"ui://733aoo45gzaz72\";\r\n+        this._overPiano.animationName = this._animateName[btn.name].idle;\r\n+        this._overPiano.skinName = this._animateName[btn.name].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n"
                },
                {
                    "date": 1624344046603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,10 +104,10 @@\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n         this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n         this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n \r\n-        this._overPiano.animationName = this._animateName[btn.name].idle;\r\n-        this._overPiano.skinName = this._animateName[btn.name].skin;\r\n+        this._overPiano.animationName = this._animateName[].idle;\r\n+        this._overPiano.skinName = this._animateName[''].skin;\r\n         this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n"
                },
                {
                    "date": 1624344083579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,571 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344095231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,579 +108,12 @@\n         this._overPiano.animationName = this._animateName['piano'].idle;\r\n         this._overPiano.skinName = this._animateName['piano'].skin;\r\n         this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+        this._overGu.animationName = this._animateName['piano'].idle;\r\n+        this._overGu.skinName = this._animateName['piano'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n \r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-\r\n-        this._overPiano.animationName = this._animateName[].idle;\r\n-        this._overPiano.skinName = this._animateName[''].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n         this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n"
                },
                {
                    "date": 1624344101758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,10 +108,10 @@\n         this._overPiano.animationName = this._animateName['piano'].idle;\r\n         this._overPiano.skinName = this._animateName['piano'].skin;\r\n         this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n-        this._overGu.animationName = this._animateName['piano'].idle;\r\n-        this._overGu.skinName = this._animateName['piano'].skin;\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n         this._overGu.url = \"ui://733aoo45gzaz72\";\r\n \r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n"
                },
                {
                    "date": 1624344157300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,9 +177,10 @@\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n-            maskOver: false\r\n+            maskOver: false,\r\n+            overAnimShow: false\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n"
                },
                {
                    "date": 1624344207756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,575 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344227521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -572,580 +572,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-            overAnimShow: false\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624344293558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,33 @@\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n+                cc.audioEngine.stopAllEffects();\r\n+                let btn = this._options[name];\r\n+                let item = null;\r\n+                item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+                let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+                let audioId = cc.audioEngine.play(audio, false, 1);\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].play;\r\n+                }\r\n+\r\n+                cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                    if (this._isAnimateShow) {\r\n+\r\n+                        let btnTemp = btn as fgui.GLoader3D;\r\n+                        btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                    }\r\n+\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.clickPlayName = '';\r\n+                    this.updateState(state);\r\n+                });\r\n+\r\n                 this.answerFeedback(true);\r\n             }\r\n         }\r\n \r\n"
                },
                {
                    "date": 1624344298709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -374,8 +374,9 @@\n                     state.clickPlayName = '';\r\n                     this.updateState(state);\r\n                 });\r\n \r\n+\r\n                 this.answerFeedback(true);\r\n             }\r\n         }\r\n \r\n"
                },
                {
                    "date": 1624344325565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,8 +350,9 @@\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n                 cc.audioEngine.stopAllEffects();\r\n+                this._overAnimShow.visible = true;\r\n                 let btn = this._options[name];\r\n                 let item = null;\r\n                 item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n                 let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n"
                },
                {
                    "date": 1624344360654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,8 +103,9 @@\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n         this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n         this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].idle;\r\n         this._overPiano.skinName = this._animateName['piano'].skin;\r\n         this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n@@ -351,9 +352,9 @@\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n                 cc.audioEngine.stopAllEffects();\r\n                 this._overAnimShow.visible = true;\r\n-                let btn = this._options[name];\r\n+\r\n                 let item = null;\r\n                 item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n                 let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n                 let audioId = cc.audioEngine.play(audio, false, 1);\r\n"
                },
                {
                    "date": 1624344382251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -354,9 +354,9 @@\n                 cc.audioEngine.stopAllEffects();\r\n                 this._overAnimShow.visible = true;\r\n \r\n                 let item = null;\r\n-                item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+                item = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n                 let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n                 let audioId = cc.audioEngine.play(audio, false, 1);\r\n                 if (this._isAnimateShow) {\r\n \r\n"
                },
                {
                    "date": 1624344409887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -353,10 +353,9 @@\n \r\n                 cc.audioEngine.stopAllEffects();\r\n                 this._overAnimShow.visible = true;\r\n \r\n-                let item = null;\r\n-                item = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+                let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n                 let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n                 let audioId = cc.audioEngine.play(audio, false, 1);\r\n                 if (this._isAnimateShow) {\r\n \r\n"
                },
                {
                    "date": 1624344414986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,602 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                cc.audioEngine.stopAllEffects();\r\n+                this._overAnimShow.visible = true;\r\n+\r\n+                let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+                let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+                let audioId = cc.audioEngine.play(audio, false, 1);\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].play;\r\n+                }\r\n+\r\n+                cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                    if (this._isAnimateShow) {\r\n+\r\n+                        let btnTemp = btn as fgui.GLoader3D;\r\n+                        btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                    }\r\n+\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.clickPlayName = '';\r\n+                    this.updateState(state);\r\n+                });\r\n+\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344421629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,602 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                cc.audioEngine.stopAllEffects();\r\n+                this._overAnimShow.visible = true;\r\n+\r\n+                let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+                let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+                let audioId = cc.audioEngine.play(audio, false, 1);\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].play;\r\n+                }\r\n+\r\n+                cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+                    if (this._isAnimateShow) {\r\n+\r\n+                        let btnTemp = btn as fgui.GLoader3D;\r\n+                        btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                    }\r\n+\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.clickPlayName = '';\r\n+                    this.updateState(state);\r\n+                });\r\n+\r\n+\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344452761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -433,610 +433,13 @@\n         }\r\n     }\r\n \r\n \r\n-    async playClickYueQi(name: string) {\r\n+    playOverShowAnimate() {\r\n \r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n \r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n     }\r\n \r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                cc.audioEngine.stopAllEffects();\r\n-                this._overAnimShow.visible = true;\r\n-\r\n-                let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-                let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-                let audioId = cc.audioEngine.play(audio, false, 1);\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].play;\r\n-                }\r\n-\r\n-                cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                    if (this._isAnimateShow) {\r\n-\r\n-                        let btnTemp = btn as fgui.GLoader3D;\r\n-                        btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                    }\r\n-\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.clickPlayName = '';\r\n-                    this.updateState(state);\r\n-                });\r\n-\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n     async playClickYueQi(name: string) {\r\n \r\n         cc.audioEngine.stopAllEffects();\r\n         let btn = this._options[name];\r\n@@ -1201,606 +604,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                cc.audioEngine.stopAllEffects();\r\n-                this._overAnimShow.visible = true;\r\n-\r\n-                let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-                let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-                let audioId = cc.audioEngine.play(audio, false, 1);\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].play;\r\n-                }\r\n-\r\n-                cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                    if (this._isAnimateShow) {\r\n-\r\n-                        let btnTemp = btn as fgui.GLoader3D;\r\n-                        btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                    }\r\n-\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.clickPlayName = '';\r\n-                    this.updateState(state);\r\n-                });\r\n-\r\n-\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624344465768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,8 +350,9 @@\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n+                this.playOverShowAnimate();\r\n                 cc.audioEngine.stopAllEffects();\r\n                 this._overAnimShow.visible = true;\r\n \r\n                 let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n"
                },
                {
                    "date": 1624344478630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,34 +351,8 @@\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n                 this.playOverShowAnimate();\r\n-                cc.audioEngine.stopAllEffects();\r\n-                this._overAnimShow.visible = true;\r\n-\r\n-                let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-                let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-                let audioId = cc.audioEngine.play(audio, false, 1);\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].play;\r\n-                }\r\n-\r\n-                cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-                    if (this._isAnimateShow) {\r\n-\r\n-                        let btnTemp = btn as fgui.GLoader3D;\r\n-                        btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                    }\r\n-\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.clickPlayName = '';\r\n-                    this.updateState(state);\r\n-                });\r\n-\r\n-\r\n                 this.answerFeedback(true);\r\n             }\r\n         }\r\n \r\n@@ -436,9 +410,33 @@\n \r\n \r\n     playOverShowAnimate() {\r\n \r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n \r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n     }\r\n \r\n     async playClickYueQi(name: string) {\r\n \r\n"
                },
                {
                    "date": 1624344494047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,606 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.playOverShowAnimate();\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344501064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,606 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                this.playOverShowAnimate();\r\n+                this.answerFeedback(true);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344539709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,619 +350,23 @@\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n-                this.playOverShowAnimate();\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n                 if (this._isAnimateShow) {\r\n \r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n+                    this.playOverShowAnimate();\r\n \r\n                 } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n+                    this.answerFeedback(true);\r\n                 }\r\n+                if () {\r\n \r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n+                }\r\n \r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n \r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n             }\r\n         }\r\n \r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.playOverShowAnimate();\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n         if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n \r\n             this._maskOver.visible = state.maskOver;\r\n         }\r\n@@ -1209,610 +613,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                this.playOverShowAnimate();\r\n-                this.answerFeedback(true);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624344600484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -357,13 +357,8 @@\n \r\n                 } else {\r\n                     this.answerFeedback(true);\r\n                 }\r\n-                if () {\r\n-\r\n-                }\r\n-\r\n-\r\n             }\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n@@ -426,14 +421,10 @@\n \r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n \r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n             if (this._isAnimateShow) {\r\n \r\n"
                },
                {
                    "date": 1624344605698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344614351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,598 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344622268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,607 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+        });\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344634441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,14 +427,14 @@\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n         });\r\n \r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n \r\n         });\r\n \r\n     }\r\n@@ -604,1816 +604,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624344641829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -427,11 +427,11 @@\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n         });\r\n \r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio, false, 1);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n \r\n"
                },
                {
                    "date": 1624344663962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -431,9 +431,9 @@\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        this._overGu.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n \r\n         });\r\n \r\n"
                },
                {
                    "date": 1624344683633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,18 +424,18 @@\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n         });\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n         this._overGu.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-\r\n+            this._overGu.animationName = this._animateName['piano'].idle;\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624344689421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -431,11 +431,11 @@\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n-        this._overGu.animationName = this._animateName['piano'].play;\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['piano'].idle;\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624344734477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -418,14 +418,18 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n+        let isPianoFinish = false;\r\n+        let isGuFinish = false;\r\n+\r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            isPianoFinish = true;\r\n             this._overPiano.animationName = this._animateName['piano'].idle;\r\n         });\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n@@ -433,8 +437,9 @@\n         let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n         this._overGu.animationName = this._animateName['gu'].play;\r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            isGuFinish = true;\r\n             this._overGu.animationName = this._animateName['gu'].idle;\r\n         });\r\n \r\n     }\r\n"
                },
                {
                    "date": 1624344749699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,8 +441,12 @@\n             isGuFinish = true;\r\n             this._overGu.animationName = this._animateName['gu'].idle;\r\n         });\r\n \r\n+        if (isPianoFinish && isGuFinish) {\r\n+\r\n+        }\r\n+\r\n     }\r\n \r\n     async playClickYueQi(name: string) {\r\n \r\n"
                },
                {
                    "date": 1624344761057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,616 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let isPianoFinish = false;\r\n+        let isGuFinish = false;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            isPianoFinish = true;\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            isGuFinish = true;\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+        if (isPianoFinish && isGuFinish) {\r\n+\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344770494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,616 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let isPianoFinish = false;\r\n+        let isGuFinish = false;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            isPianoFinish = true;\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            isGuFinish = true;\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+        if (isPianoFinish && isGuFinish) {\r\n+            this.answerFeedback(true);\r\n+        }\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624344779630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -442,8 +442,9 @@\n             this._overGu.animationName = this._animateName['gu'].idle;\r\n         });\r\n \r\n         if (isPianoFinish && isGuFinish) {\r\n+            this._overAnimShow.visible = false;\r\n             this.answerFeedback(true);\r\n         }\r\n \r\n     }\r\n@@ -613,1236 +614,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let isPianoFinish = false;\r\n-        let isGuFinish = false;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            isPianoFinish = true;\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            isGuFinish = true;\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-        if (isPianoFinish && isGuFinish) {\r\n-\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let isPianoFinish = false;\r\n-        let isGuFinish = false;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            isPianoFinish = true;\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            isGuFinish = true;\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-        if (isPianoFinish && isGuFinish) {\r\n-\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624344901053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -429,8 +429,10 @@\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             isPianoFinish = true;\r\n             this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n         });\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n@@ -442,10 +444,9 @@\n             this._overGu.animationName = this._animateName['gu'].idle;\r\n         });\r\n \r\n         if (isPianoFinish && isGuFinish) {\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n+\r\n         }\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624344916637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -418,18 +418,14 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        let isPianoFinish = false;\r\n-        let isGuFinish = false;\r\n-\r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            isPianoFinish = true;\r\n             this._overPiano.animationName = this._animateName['piano'].idle;\r\n             this._overAnimShow.visible = false;\r\n             this.answerFeedback(true);\r\n         });\r\n@@ -439,16 +435,11 @@\n         let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n         this._overGu.animationName = this._animateName['gu'].play;\r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            isGuFinish = true;\r\n             this._overGu.animationName = this._animateName['gu'].idle;\r\n         });\r\n \r\n-        if (isPianoFinish && isGuFinish) {\r\n-\r\n-        }\r\n-\r\n     }\r\n \r\n     async playClickYueQi(name: string) {\r\n \r\n"
                },
                {
                    "date": 1624345002905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,609 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624345077349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,609 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+        this._overAnimShow.visible = false;\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        this._overPiano.skinName = this._animateName['piano'].skin;\r\n+        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].idle;\r\n+        this._overGu.skinName = this._animateName['gu'].skin;\r\n+        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624345130183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,21 +100,8 @@\n \r\n         this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n         this._maskOver.visible = false;\r\n \r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n         this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n@@ -227,1226 +214,22 @@\n \r\n         item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n         this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+        if () {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n             this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n \r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n             this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n             this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n         }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-        this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-        this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-        this._overAnimShow.visible = false;\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].idle;\r\n-        this._overPiano.skinName = this._animateName['piano'].skin;\r\n-        this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].idle;\r\n-        this._overGu.skinName = this._animateName['gu'].skin;\r\n-        this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n         if (components) {\r\n             for (const key in components) {\r\n                 let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n                 let componentBundle: any = await loadBundle(componentPath);\r\n"
                },
                {
                    "date": 1624345142757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,610 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _maskOver: fgui.GGraph;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n+        this._maskOver.visible = false;\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            maskOver: false,\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+                state.maskOver = true;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n+\r\n+            this._maskOver.visible = state.maskOver;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624345150526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -607,614 +607,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            maskOver: false,\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if () {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624354041931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,10 +34,8 @@\n     private _optionsRect = {};\r\n \r\n     private _package: any;\r\n \r\n-    private _maskOver: fgui.GGraph;\r\n-\r\n     private _labaguai: fgui.GButton;\r\n \r\n     private _isAnimateShow: boolean = false;\r\n \r\n@@ -97,11 +95,8 @@\n             this._c1.selectedIndex = 1;\r\n             this._c1.selectedIndex = 0;\r\n         }\r\n \r\n-        this._maskOver = this._view.getChild(\"maskOver\").asGraph;\r\n-        this._maskOver.visible = false;\r\n-\r\n         this._submit = this._view.getChild(\"submit\").asButton;\r\n         if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n \r\n         this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n@@ -165,9 +160,8 @@\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n-            maskOver: false,\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n@@ -361,13 +355,8 @@\n                 }\r\n             }\r\n         }\r\n \r\n-        if (!globalThis._.isEqual(oldState.maskOver, state.maskOver)) {\r\n-\r\n-            this._maskOver.visible = state.maskOver;\r\n-        }\r\n-\r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n"
                },
                {
                    "date": 1624354048393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -311,9 +311,8 @@\n             let submitNamesTemp = submitNames.sort();\r\n             let right = this._rigthName.sort();\r\n             if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n                 state.submit = this.submitType.RightFeed;\r\n-                state.maskOver = true;\r\n \r\n             } else {\r\n                 state.submit = this.submitType.WrongFeed;\r\n             }\r\n"
                },
                {
                    "date": 1624354582603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,598 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                this._rightSoundFile.push(item);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624354594421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -595,602 +595,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n-                this._rightSoundFile.push(item);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624354727214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,8 +371,14 @@\n \r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n             this.playLaBaGuai(state.laBaGuaiPlay);\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n"
                },
                {
                    "date": 1624354735610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,9 @@\n \r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+            if (state.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n"
                },
                {
                    "date": 1624354947359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,8 +281,9 @@\n     private _clickLaBaGuai(evt: any) {\r\n \r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n         this.updateState(state);\r\n     }\r\n \r\n     private async _clickOption(evt: any) {\r\n"
                },
                {
                    "date": 1624354962012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,14 +372,8 @@\n \r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            if (state.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n             this.playLaBaGuai(state.laBaGuaiPlay);\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n"
                },
                {
                    "date": 1624440411350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,8 +592,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n+\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624440507188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,9 +592,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n-\r\n+        cc.tween.stop();\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624440530723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,9 +592,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n-        cc.tween.stop();\r\n+        cc.tween.start();\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624440539784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,9 +592,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n-        cc.tween.start();\r\n+        cc.tween().stop();\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624440559627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,9 +592,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n-        cc.tween().stop();\r\n+        cc.tween().stopAll\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624440578681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -592,9 +592,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n-        cc.tween().stopAll\r\n+        cc.tween(this).stop();\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624616317524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n         // 临时 model component json 配置加载\r\n         let { pathConfig, model, components } = data;\r\n         let Package = pathConfig.packageName;\r\n         let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName, rightSoundTime } = model.config;\r\n         this._package = Package;\r\n \r\n         this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n \r\n"
                },
                {
                    "date": 1624616368571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,10 @@\n     private _overAnimShow: fgui.GGroup;\r\n     private _overPiano: fgui.GLoader3D;\r\n     private _overGu: fgui.GLoader3D;\r\n \r\n+    private _rightSoundTime: number;\r\n+\r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n         GuideShow: 1,\r\n@@ -191,8 +193,9 @@\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n         if (rightName) this._rigthName = rightName;\r\n+        if () this._rightSoundTime = rightSoundTime;\r\n         if (optionsRect) {\r\n \r\n             for (var key in optionsRect) {\r\n \r\n"
                },
                {
                    "date": 1624616373781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,10 @@\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n         if (rightName) this._rigthName = rightName;\r\n-        if () this._rightSoundTime = rightSoundTime;\r\n+        if (rightSoundTime) this._rightSoundTime = rightSoundTime;\r\n+\r\n         if (optionsRect) {\r\n \r\n             for (var key in optionsRect) {\r\n \r\n"
                },
                {
                    "date": 1624617342903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -498,8 +498,9 @@\n     async playRightSound(curIndex: number) {\r\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n                 this._laba2.animationName = 'idle';\r\n"
                },
                {
                    "date": 1624617355444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n         if (soundFile) this._soundFile = soundFile;\r\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n                 this._rightSoundFile.push(item);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n"
                },
                {
                    "date": 1624617379042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,8 +188,9 @@\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n                 let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { path };\r\n                 this._rightSoundFile.push(item);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n"
                },
                {
                    "date": 1624617412817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n                 let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { path };\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n                 this._rightSoundFile.push(item);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n"
                },
                {
                    "date": 1624617484482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,9 +189,9 @@\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n                 let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n                 let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(item);\r\n+                this._rightSoundFile.push(tempMap);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n         if (rightName) this._rigthName = rightName;\r\n"
                },
                {
                    "date": 1624617496463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -497,9 +497,9 @@\n     }\r\n \r\n     async playRightSound(curIndex: number) {\r\n \r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex]..path.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624617501592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -497,9 +497,9 @@\n     }\r\n \r\n     async playRightSound(curIndex: number) {\r\n \r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex]..path.file, cc.AudioClip);\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624617556140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,8 +500,11 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n+        setTimeout(() => {\r\n+\r\n+        }, this._rightSoundFile[curIndex].time);\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n                 this._laba2.animationName = 'idle';\r\n@@ -519,9 +522,8 @@\n     }\r\n \r\n     answerFeedback(bool: boolean) {\r\n         if (!this.feedback) return;\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n         let feedback: any = cc.instantiate(this.feedback);\r\n         feedback.x = 960;\r\n         feedback.y = 540;\r\n         let feedbackJs: any = feedback.getComponent(cc.Component);\r\n"
                },
                {
                    "date": 1624617561325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,9 +502,11 @@\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n+\r\n         }, this._rightSoundFile[curIndex].time);\r\n+\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n                 this._laba2.animationName = 'idle';\r\n"
                },
                {
                    "date": 1624617568396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,12 +502,8 @@\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n-\r\n-        }, this._rightSoundFile[curIndex].time);\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n                 this._laba2.animationName = 'idle';\r\n                 let state: any = globalThis._.cloneDeep(this._state);\r\n@@ -518,8 +514,13 @@\n                 curIndex++;\r\n                 this.playRightSound(curIndex);\r\n             }\r\n \r\n+\r\n+        }, this._rightSoundFile[curIndex].time);\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624617575483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -514,15 +514,10 @@\n                 curIndex++;\r\n                 this.playRightSound(curIndex);\r\n             }\r\n \r\n-\r\n         }, this._rightSoundFile[curIndex].time);\r\n \r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-        });\r\n-\r\n     }\r\n \r\n     answerFeedback(bool: boolean) {\r\n         if (!this.feedback) return;\r\n"
                },
                {
                    "date": 1624617580672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -498,9 +498,9 @@\n \r\n     async playRightSound(curIndex: number) {\r\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624617704219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,606 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _rightSoundTime: number;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName, rightSoundTime } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (rightSoundTime) this._rightSoundTime = rightSoundTime;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        setTimeout(() => {\r\n+\r\n+            if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                this._laba2.animationName = 'idle';\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.laBaGuaiPlay = false;\r\n+                this.updateState(state);\r\n+\r\n+            } else {\r\n+                curIndex++;\r\n+                this.playRightSound(curIndex);\r\n+            }\r\n+\r\n+        }, this._rightSoundFile[curIndex].time);\r\n+\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.tween(this).stop();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624617709503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -603,610 +603,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _rightSoundTime: number;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName, rightSoundTime } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (rightSoundTime) this._rightSoundTime = rightSoundTime;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        setTimeout(() => {\r\n-\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n-\r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n-        }, this._rightSoundFile[curIndex].time);\r\n-\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.tween(this).stop();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624617792953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -497,9 +497,9 @@\n     }\r\n \r\n     async playRightSound(curIndex: number) {\r\n \r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex]['path'].file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n"
                },
                {
                    "date": 1624617802233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n         if (soundFile) this._soundFile = soundFile;\r\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]['path']);\r\n                 let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n                 this._rightSoundFile.push(tempMap);\r\n             }\r\n         }\r\n"
                },
                {
                    "date": 1624617814123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n                 let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]['path']);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].['time'] };\r\n                 this._rightSoundFile.push(tempMap);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n"
                },
                {
                    "date": 1624617842948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n                 let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]['path']);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].['time'] };\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i]['time'] };\r\n                 this._rightSoundFile.push(tempMap);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n@@ -514,9 +514,9 @@\n                 curIndex++;\r\n                 this.playRightSound(curIndex);\r\n             }\r\n \r\n-        }, this._rightSoundFile[curIndex].time);\r\n+        }, this._rightSoundFile[curIndex]['time']);\r\n \r\n     }\r\n \r\n     answerFeedback(bool: boolean) {\r\n"
                },
                {
                    "date": 1624617980136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,10 +187,10 @@\n         if (soundFile) this._soundFile = soundFile;\r\n         if (rightSoundFile) {\r\n \r\n             for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]['path']);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i]['time'] };\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n                 this._rightSoundFile.push(tempMap);\r\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n@@ -497,9 +497,9 @@\n     }\r\n \r\n     async playRightSound(curIndex: number) {\r\n \r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex]['path'].file, cc.AudioClip);\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n@@ -514,9 +514,9 @@\n                 curIndex++;\r\n                 this.playRightSound(curIndex);\r\n             }\r\n \r\n-        }, this._rightSoundFile[curIndex]['time']);\r\n+        }, this._rightSoundFile[curIndex].time);\r\n \r\n     }\r\n \r\n     answerFeedback(bool: boolean) {\r\n"
                },
                {
                    "date": 1624618663660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,8 +502,11 @@\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n+            if (this._rightSoundFile) {\r\n+\r\n+            }\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n                 this._laba2.animationName = 'idle';\r\n                 let state: any = globalThis._.cloneDeep(this._state);\r\n"
                },
                {
                    "date": 1624618696041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,10 +502,11 @@\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         setTimeout(() => {\r\n \r\n-            if (this._rightSoundFile) {\r\n+            if (!this._rightSoundFile) {\r\n \r\n+                return;\r\n             }\r\n             if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n                 this._laba2.animationName = 'idle';\r\n"
                },
                {
                    "date": 1624620038937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n         this.disableForbidHandle();\r\n         // 销毁反馈\r\n         let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n         if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n     }\r\n \r\n     async init(data: any) {\r\n         // 临时 model component json 配置加载\r\n"
                },
                {
                    "date": 1624620617844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -603,9 +603,9 @@\n         this.registerState();\r\n     }\r\n \r\n     onDisable() {\r\n-        cc.tween(this).stop();\r\n+        cc.Tween.stopAll();\r\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1624620725616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,8 +501,10 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n+        cc.tween(this)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n         setTimeout(() => {\r\n \r\n             if (!this._rightSoundFile) {\r\n \r\n"
                },
                {
                    "date": 1624620742929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -503,8 +503,13 @@\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         cc.tween(this)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n         setTimeout(() => {\r\n \r\n             if (!this._rightSoundFile) {\r\n \r\n"
                },
                {
                    "date": 1624620752963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -505,29 +505,28 @@\n         cc.tween(this)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n             })\r\n             .start();\r\n \r\n         setTimeout(() => {\r\n \r\n-            if (!this._rightSoundFile) {\r\n \r\n-                return;\r\n-            }\r\n-            if (curIndex >= this._rightSoundFile.length - 1) {\r\n \r\n-                this._laba2.animationName = 'idle';\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.laBaGuaiPlay = false;\r\n-                this.updateState(state);\r\n \r\n-            } else {\r\n-                curIndex++;\r\n-                this.playRightSound(curIndex);\r\n-            }\r\n-\r\n         }, this._rightSoundFile[curIndex].time);\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624620759436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -519,16 +519,8 @@\n                 }\r\n \r\n             })\r\n             .start();\r\n-\r\n-        setTimeout(() => {\r\n-\r\n-\r\n-\r\n-\r\n-        }, this._rightSoundFile[curIndex].time);\r\n-\r\n     }\r\n \r\n     answerFeedback(bool: boolean) {\r\n         if (!this.feedback) return;\r\n"
                },
                {
                    "date": 1624621690067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -598,8 +598,9 @@\n     }\r\n \r\n     onEnable() {\r\n         this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n     }\r\n \r\n     onDisable() {\r\n         cc.Tween.stopAll();\r\n"
                },
                {
                    "date": 1624621713745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,10 @@\n     private _overGu: fgui.GLoader3D;\r\n \r\n     private _rightSoundTime: number;\r\n \r\n+    private _scheduleTime = .3;\r\n+\r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n         GuideShow: 1,\r\n"
                },
                {
                    "date": 1624621728081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,10 @@\n     private _overAnimShow: fgui.GGroup;\r\n     private _overPiano: fgui.GLoader3D;\r\n     private _overGu: fgui.GLoader3D;\r\n \r\n-    private _rightSoundTime: number;\r\n+    private _scheduleTime = 0.3;\r\n \r\n-    private _scheduleTime = .3;\r\n-\r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n         GuideShow: 1,\r\n"
                },
                {
                    "date": 1624621767418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,8 +326,21 @@\n         }\r\n         this.updateState(state);\r\n     }\r\n \r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.dragBtn = {\r\n+                x: this._dragBtn.x,\r\n+                y: this._dragBtn.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n     // 获取状态\r\n     getState(data: any) {\r\n         this.updateState(data);\r\n     }\r\n"
                },
                {
                    "date": 1624621785052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n     private _overPiano: fgui.GLoader3D;\r\n     private _overGu: fgui.GLoader3D;\r\n \r\n     private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n \r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n@@ -339,8 +340,9 @@\n             };\r\n             this.updateState(state);\r\n         }\r\n     }\r\n+\r\n     // 获取状态\r\n     getState(data: any) {\r\n         this.updateState(data);\r\n     }\r\n"
                },
                {
                    "date": 1624621790687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,625 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName, rightSoundTime } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+        if (rightSoundTime) this._rightSoundTime = rightSoundTime;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.dragBtn = {\r\n+                x: this._dragBtn.x,\r\n+                y: this._dragBtn.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624621801411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -622,629 +622,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName, rightSoundTime } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-        if (rightSoundTime) this._rightSoundTime = rightSoundTime;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.dragBtn = {\r\n-                x: this._dragBtn.x,\r\n-                y: this._dragBtn.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624623326542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     private _overGu: fgui.GLoader3D;\r\n \r\n     private _scheduleTime = 0.3;\r\n     private _dragging = false;\r\n+    private _cachDrag = {}\r\n \r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n"
                },
                {
                    "date": 1624623344761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     private _overGu: fgui.GLoader3D;\r\n \r\n     private _scheduleTime = 0.3;\r\n     private _dragging = false;\r\n-    private _cachDrag = {}\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n \r\n     private submitType: any = cc.Enum({\r\n \r\n         No: 0,\r\n"
                },
                {
                    "date": 1624623380923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,10 +149,11 @@\n         if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n+        this._cachDragPos =\r\n \r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+            this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n \r\n         this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n         this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n         this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n"
                },
                {
                    "date": 1624623455252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,11 +149,12 @@\n         if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n \r\n         this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n         this._magicPen.draggable = true;\r\n-        this._cachDragPos =\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n \r\n-            this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n \r\n         this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n         this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n         this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n"
                },
                {
                    "date": 1624623646445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,8 +166,9 @@\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n+            magicPen: this._cachDragPos,\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n"
                },
                {
                    "date": 1624623655646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n-            magicPen: this._cachDragPos,\r\n+            magicDragPen: this._cachDragPos\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n"
                },
                {
                    "date": 1624623694242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,10 @@\n             submit: false,\r\n             move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n"
                },
                {
                    "date": 1624623857003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,8 +251,9 @@\n \r\n         evt.captureTouch();\r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.move = true;\r\n+        state.drag = 'start';\r\n \r\n         this.updateState(state);\r\n \r\n     }\r\n"
                },
                {
                    "date": 1624623868218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,8 @@\n         evt.captureTouch();\r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.move = true;\r\n         state.drag = 'start';\r\n-\r\n         this.updateState(state);\r\n \r\n     }\r\n \r\n@@ -271,8 +270,9 @@\n         let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n \r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.move = false;\r\n+        state.drag = 'end';\r\n         for (var key in this._optionsRect) {\r\n \r\n             let rect = this._optionsRect[key];\r\n             if (rect.intersects(btnRect)) {\r\n"
                },
                {
                    "date": 1624623967777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,13 +258,14 @@\n     }\r\n \r\n     private _onDragMove(evt: fgui.Event): void {\r\n \r\n+        this._dragging = true;\r\n \r\n-\r\n     }\r\n \r\n     private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n         cc.audioEngine.playEffect(this._dragSound, false);\r\n \r\n         var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n         let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n"
                },
                {
                    "date": 1624623974135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,8 +264,9 @@\n     }\r\n \r\n     private _onDragEnd(evt: fgui.Event): void {\r\n         this._dragging = false;\r\n+\r\n         cc.audioEngine.playEffect(this._dragSound, false);\r\n \r\n         var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n         let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n"
                },
                {
                    "date": 1624624015731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,10 +342,10 @@\n         if (this._dragging) {\r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n             state.drag = \"move\";\r\n             state.dragBtn = {\r\n-                x: this._dragBtn.x,\r\n-                y: this._dragBtn.y,\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n             };\r\n             this.updateState(state);\r\n         }\r\n     }\r\n"
                },
                {
                    "date": 1624624094595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n         // 临时 model component json 配置加载\r\n         let { pathConfig, model, components } = data;\r\n         let Package = pathConfig.packageName;\r\n         let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName, rightSoundTime } = model.config;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n         this._package = Package;\r\n \r\n         this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n \r\n@@ -201,9 +201,8 @@\n             }\r\n         }\r\n         if (animateName) this._animateName = animateName;\r\n         if (rightName) this._rigthName = rightName;\r\n-        if (rightSoundTime) this._rightSoundTime = rightSoundTime;\r\n \r\n         if (optionsRect) {\r\n \r\n             for (var key in optionsRect) {\r\n"
                },
                {
                    "date": 1624624159564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -362,8 +362,13 @@\n \r\n     // 更新ui层\r\n     updateUi(oldState: any, state: any) {\r\n \r\n+        if (state.drag == \"move\") {\r\n+            this._dragBtn.x = state.dragBtn.x;\r\n+            this._dragBtn.y = state.dragBtn.y;\r\n+        }\r\n+\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n"
                },
                {
                    "date": 1624624168968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,637 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.dragBtn = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+            this._magicPen.x = state.dragBtn.x;\r\n+            this._magicPen.y = state.dragBtn.y;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624624209261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -634,641 +634,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.dragBtn = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-            this._dragBtn.x = state.dragBtn.x;\r\n-            this._dragBtn.y = state.dragBtn.y;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624624289612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,10 +363,10 @@\n     // 更新ui层\r\n     updateUi(oldState: any, state: any) {\r\n \r\n         if (state.drag == \"move\") {\r\n-            this._magicPen.x = state.dragBtn.x;\r\n-            this._magicPen.y = state.dragBtn.y;\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n"
                },
                {
                    "date": 1624624305421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,8 +367,11 @@\n             this._magicPen.x = state.magicDragPen.x;\r\n             this._magicPen.y = state.magicDragPen.y;\r\n         }\r\n \r\n+        if (state.drag == \"end\") {\r\n+\r\n+        }\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n"
                },
                {
                    "date": 1624624322172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,10 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n         }\r\n \r\n         if (state.drag == \"end\") {\r\n-\r\n+            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n+            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n         }\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n"
                },
                {
                    "date": 1624624329259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,10 +368,10 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n         }\r\n \r\n         if (state.drag == \"end\") {\r\n-            this._dragBtn.x = this._cache[\"dragOrigin\"].x;\r\n-            this._dragBtn.y = this._cache[\"dragOrigin\"].y;\r\n+            this._magicPen.x = this._cache[\"dragOrigin\"].x;\r\n+            this._magicPen.y = this._cache[\"dragOrigin\"].y;\r\n         }\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n"
                },
                {
                    "date": 1624624336289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,11 +368,13 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n         }\r\n \r\n         if (state.drag == \"end\") {\r\n+\r\n             this._magicPen.x = this._cache[\"dragOrigin\"].x;\r\n             this._magicPen.y = this._cache[\"dragOrigin\"].y;\r\n         }\r\n+\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n"
                },
                {
                    "date": 1624624388771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,10 +369,10 @@\n         }\r\n \r\n         if (state.drag == \"end\") {\r\n \r\n-            this._magicPen.x = this._cache[\"dragOrigin\"].x;\r\n-            this._magicPen.y = this._cache[\"dragOrigin\"].y;\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n"
                },
                {
                    "date": 1624691822796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,9 +340,9 @@\n     dragSchedule() {\r\n         if (this._dragging) {\r\n             let state: any = globalThis._.cloneDeep(this._state);\r\n             state.drag = \"move\";\r\n-            state.dragBtn = {\r\n+            state.magicDragPen = {\r\n                 x: this._magicPen.x,\r\n                 y: this._magicPen.y,\r\n             };\r\n             this.updateState(state);\r\n"
                },
                {
                    "date": 1624691930393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -373,8 +373,22 @@\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n         }\r\n \r\n+        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n+\r\n+            if (state.move) {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+            } else {\r\n+\r\n+                this._magicPen.icon = this._magicPenData[0].icon;\r\n+                this._magicPen.x = this._magicPenData[0].x;\r\n+                this._magicPen.y = this._magicPenData[0].y;\r\n+            }\r\n+        }\r\n+\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n@@ -414,22 +428,10 @@\n         if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n             this.playLaBaGuai(state.laBaGuaiPlay);\r\n         }\r\n \r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n \r\n-            if (state.move) {\r\n \r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-            } else {\r\n-\r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n-            }\r\n-        }\r\n-\r\n         if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n \r\n             for (var key in state.lightSelect) {\r\n \r\n"
                },
                {
                    "date": 1624692018758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -365,10 +365,11 @@\n \r\n         if (state.drag == \"move\") {\r\n             this._magicPen.x = state.magicDragPen.x;\r\n             this._magicPen.y = state.magicDragPen.y;\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n         }\r\n-\r\n         if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1624692026252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -367,10 +367,9 @@\n             this._magicPen.x = state.magicDragPen.x;\r\n             this._magicPen.y = state.magicDragPen.y;\r\n         } else if (state.drag == \"start\") {\r\n \r\n-        }\r\n-        if (state.drag == \"end\") {\r\n+        } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n         }\r\n"
                },
                {
                    "date": 1624692034481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -363,10 +363,12 @@\n     // 更新ui层\r\n     updateUi(oldState: any, state: any) {\r\n \r\n         if (state.drag == \"move\") {\r\n+\r\n             this._magicPen.x = state.magicDragPen.x;\r\n             this._magicPen.y = state.magicDragPen.y;\r\n+\r\n         } else if (state.drag == \"start\") {\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n"
                },
                {
                    "date": 1624692064776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,8 +369,10 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n@@ -379,10 +381,10 @@\n         if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n \r\n             if (state.move) {\r\n \r\n-                this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n+\r\n             } else {\r\n \r\n                 this._magicPen.icon = this._magicPenData[0].icon;\r\n                 this._magicPen.x = this._magicPenData[0].x;\r\n"
                },
                {
                    "date": 1624692071866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,8 +375,12 @@\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+            this._magicPen.x = this._magicPenData[0].x;\r\n+            this._magicPen.y = this._magicPenData[0].y;\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n \r\n@@ -385,11 +389,9 @@\n \r\n \r\n             } else {\r\n \r\n-                this._magicPen.icon = this._magicPenData[0].icon;\r\n-                this._magicPen.x = this._magicPenData[0].x;\r\n-                this._magicPen.y = this._magicPenData[0].y;\r\n+\r\n             }\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n"
                },
                {
                    "date": 1624692097387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,10 +377,8 @@\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n-            this._magicPen.x = this._magicPenData[0].x;\r\n-            this._magicPen.y = this._magicPenData[0].y;\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n \r\n"
                },
                {
                    "date": 1624692103565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,20 +379,8 @@\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n         }\r\n \r\n-        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n-\r\n-            if (state.move) {\r\n-\r\n-\r\n-\r\n-            } else {\r\n-\r\n-\r\n-            }\r\n-        }\r\n-\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n"
                },
                {
                    "date": 1624692109942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -420,10 +420,8 @@\n         if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n             this.playLaBaGuai(state.laBaGuaiPlay);\r\n         }\r\n \r\n-\r\n-\r\n         if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n \r\n             for (var key in state.lightSelect) {\r\n \r\n"
                },
                {
                    "date": 1624693379773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,9 +526,9 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        cc.tween(this)\r\n+        cc.tween(this._laba2)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n                 if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624693467840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -527,8 +527,9 @@\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         cc.tween(this._laba2)\r\n+        cc.tween(this._laba2)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n                 if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624693473526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,10 +526,10 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n+        cc.tween(this._laba2).stop();\r\n         cc.tween(this._laba2)\r\n-        cc.tween(this._laba2)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n                 if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624693575510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,10 +526,10 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        cc.tween(this._laba2).stop();\r\n-        cc.tween(this._laba2)\r\n+        cc.tween(this._labaguai).stop();\r\n+        cc.tween(this._labaguai)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n                 if (curIndex >= this._rightSoundFile.length - 1) {\r\n"
                },
                {
                    "date": 1624693648621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,9 +526,9 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        cc.tween(this._labaguai).stop();\r\n+        console.log('==== ===');\r\n         cc.tween(this._labaguai)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n"
                },
                {
                    "date": 1624693657594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,9 +526,9 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('==== ===');\r\n+        console.log('==== ====' + this._rightSoundFile[curIndex].time);\r\n         cc.tween(this._labaguai)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n"
                },
                {
                    "date": 1624693663285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,9 +526,9 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('==== ====' + this._rightSoundFile[curIndex].time);\r\n+        console.log('==== time ====' + this._rightSoundFile[curIndex].time);\r\n         cc.tween(this._labaguai)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n"
                },
                {
                    "date": 1624693801950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -526,9 +526,8 @@\n \r\n         let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('==== time ====' + this._rightSoundFile[curIndex].time);\r\n         cc.tween(this._labaguai)\r\n             .delay(this._rightSoundFile[curIndex].time)\r\n             .call(() => {\r\n \r\n"
                },
                {
                    "date": 1624701930070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,635 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624701930187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,635 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624701937616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -632,1274 +632,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624702004314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,635 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624702009500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -632,639 +632,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624702143099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,634 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624702161088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -631,639 +631,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624702169299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,634 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.clickPlayName = '';\r\n+            this.updateState(state);\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624702175459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -631,638 +631,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624702273538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,9 +370,13 @@\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n+            for (let key in this._options) {\r\n \r\n+            }\r\n+            this._options[btn.name]\r\n+\r\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1624702282645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,12 +371,12 @@\n         } else if (state.drag == \"start\") {\r\n \r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n             for (let key in this._options) {\r\n-\r\n+                this._options[key]\r\n             }\r\n-            this._options[btn.name]\r\n \r\n+\r\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1624702386713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,10 @@\n         } else if (state.drag == \"start\") {\r\n \r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n             for (let key in this._options) {\r\n-                this._options[key]\r\n+                this._options[key].animationName = this._animateName[btn.name].idle;\r\n+\r\n             }\r\n \r\n \r\n         } else if (state.drag == \"end\") {\r\n"
                },
                {
                    "date": 1624702395421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,13 +371,11 @@\n         } else if (state.drag == \"start\") {\r\n \r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n             for (let key in this._options) {\r\n-                this._options[key].animationName = this._animateName[btn.name].idle;\r\n-\r\n+                this._options[key].animationName = this._animateName[key].idle;\r\n             }\r\n \r\n-\r\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1624702433720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -370,12 +370,15 @@\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n-            for (let key in this._options) {\r\n-                this._options[key].animationName = this._animateName[key].idle;\r\n+            if (this._isAnimateShow) {\r\n+                for (let key in this._options) {\r\n+                    this._options[key].animationName = this._animateName[key].idle;\r\n+                }\r\n             }\r\n \r\n+\r\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1624702438878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -376,9 +376,8 @@\n                     this._options[key].animationName = this._animateName[key].idle;\r\n                 }\r\n             }\r\n \r\n-\r\n         } else if (state.drag == \"end\") {\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1624702458015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,8 +371,9 @@\n         } else if (state.drag == \"start\") {\r\n \r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n             if (this._isAnimateShow) {\r\n+\r\n                 for (let key in this._options) {\r\n                     this._options[key].animationName = this._animateName[key].idle;\r\n                 }\r\n             }\r\n"
                },
                {
                    "date": 1624703348919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -444,9 +444,9 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano']);\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n@@ -455,9 +455,9 @@\n             this._overAnimShow.visible = false;\r\n             this.answerFeedback(true);\r\n         });\r\n \r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu']);\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n \r\n         this._overGu.animationName = this._animateName['gu'].play;\r\n@@ -471,17 +471,24 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         let btn = this._options[name];\r\n         let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n         if (this._isAnimateShow) {\r\n \r\n             let btnTemp = btn as fgui.GLoader3D;\r\n             btnTemp.animationName = this._animateName[btn.name].play;\r\n         }\r\n \r\n+        cc.tween(this)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n             if (this._isAnimateShow) {\r\n \r\n"
                },
                {
                    "date": 1624703356493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -484,22 +484,24 @@\n         cc.tween(this)\r\n             .delay(this._soundFile[name].time)\r\n             .call(() => {\r\n \r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n             })\r\n             .start();\r\n \r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n-            if (this._isAnimateShow) {\r\n \r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.clickPlayName = '';\r\n-            this.updateState(state);\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624703364847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -473,9 +473,9 @@\n         let btn = this._options[name];\r\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n         if (this._isAnimateShow) {\r\n \r\n             let btnTemp = btn as fgui.GLoader3D;\r\n             btnTemp.animationName = this._animateName[btn.name].play;\r\n@@ -497,13 +497,9 @@\n \r\n             })\r\n             .start();\r\n \r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n \r\n-\r\n-        });\r\n-\r\n     }\r\n \r\n     async playTitle(bool: boolean) {\r\n         this._c1.selectedIndex = bool ? 1 : 0;\r\n"
                },
                {
                    "date": 1624703376898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -480,9 +480,9 @@\n             let btnTemp = btn as fgui.GLoader3D;\r\n             btnTemp.animationName = this._animateName[btn.name].play;\r\n         }\r\n \r\n-        cc.tween(this)\r\n+        cc.tween(btn)\r\n             .delay(this._soundFile[name].time)\r\n             .call(() => {\r\n \r\n                 if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1624703382069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,645 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                for (let key in this._options) {\r\n+                    this._options[key].animationName = this._animateName[key].idle;\r\n+                }\r\n+            }\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId, () => {\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overAnimShow.visible = false;\r\n+            this.answerFeedback(true);\r\n+        });\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(btn)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624703462888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -449,653 +449,18 @@\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         let audioId = cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n-        });\r\n \r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(btn)\r\n-            .delay(this._soundFile[name].time)\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n             .call(() => {\r\n \r\n-                if (this._isAnimateShow) {\r\n \r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n             })\r\n             .start();\r\n \r\n \r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                for (let key in this._options) {\r\n-                    this._options[key].animationName = this._animateName[key].idle;\r\n-                }\r\n-            }\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n             this._overPiano.animationName = this._animateName['piano'].idle;\r\n             this._overAnimShow.visible = false;\r\n             this.answerFeedback(true);\r\n"
                },
                {
                    "date": 1624703471807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -454,17 +454,18 @@\n         cc.tween(this._overPiano)\r\n             .delay(this._soundFile['piano'].time)\r\n             .call(() => {\r\n \r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n \r\n             })\r\n             .start();\r\n \r\n \r\n         cc.audioEngine.setFinishCallback(audioId, () => {\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overAnimShow.visible = false;\r\n-            this.answerFeedback(true);\r\n+\r\n         });\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n"
                },
                {
                    "date": 1624703488496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,663 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                for (let key in this._options) {\r\n+                    this._options[key].animationName = this._animateName[key].idle;\r\n+                }\r\n+            }\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+        });\r\n+\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(btn)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624703507270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,9 +446,9 @@\n         this._overAnimShow.visible = true;\r\n \r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n \r\n         cc.tween(this._overPiano)\r\n@@ -463,14 +463,14 @@\n             .start();\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n \r\n         this._overGu.animationName = this._animateName['gu'].play;\r\n \r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n             .call(() => {\r\n \r\n                 this._overPiano.animationName = this._animateName['piano'].idle;\r\n                 this._overAnimShow.visible = false;\r\n@@ -660,660 +660,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                for (let key in this._options) {\r\n-                    this._options[key].animationName = this._animateName[key].idle;\r\n-                }\r\n-            }\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        let audioId = cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId, () => {\r\n-\r\n-        });\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        let audioId2 = cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-        });\r\n-\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(btn)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624703513592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -471,17 +471,15 @@\n         cc.tween(this._overGu)\r\n             .delay(this._soundFile['gu'].time)\r\n             .call(() => {\r\n \r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n \r\n             })\r\n             .start();\r\n \r\n         cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n         });\r\n \r\n     }\r\n \r\n"
                },
                {
                    "date": 1624703519373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,13 +475,8 @@\n                 this._overGu.animationName = this._animateName['gu'].idle;\r\n \r\n             })\r\n             .start();\r\n-\r\n-        cc.audioEngine.setFinishCallback(audioId2, () => {\r\n-\r\n-        });\r\n-\r\n     }\r\n \r\n     async playClickYueQi(name: string) {\r\n \r\n"
                },
                {
                    "date": 1624703766707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,656 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                for (let key in this._options) {\r\n+                    this._options[key].animationName = this._animateName[key].idle;\r\n+                }\r\n+            }\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(btn)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624703766858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -653,660 +653,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                for (let key in this._options) {\r\n-                    this._options[key].animationName = this._animateName[key].idle;\r\n-                }\r\n-            }\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(btn)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624703890756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,656 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+            if (this._isAnimateShow) {\r\n+\r\n+                for (let key in this._options) {\r\n+                    this._options[key].animationName = this._animateName[key].idle;\r\n+                }\r\n+            }\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(btn)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624703899226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -653,660 +653,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                for (let key in this._options) {\r\n-                    this._options[key].animationName = this._animateName[key].idle;\r\n-                }\r\n-            }\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(btn)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624704376967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,650 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+\r\n+                let btn = this._options[oldState.clickPlayName];\r\n+                let btnTemp = btn as fgui.GLoader3D;\r\n+                btnTemp.animationName = this._animateName[btn.name].idle;\r\n+            }\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(btn)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624704452764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -647,660 +647,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-            if (this._isAnimateShow) {\r\n-\r\n-                for (let key in this._options) {\r\n-                    this._options[key].animationName = this._animateName[key].idle;\r\n-                }\r\n-            }\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(btn)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624704563375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,8 +404,9 @@\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n+                cc.Tween.stopAll();\r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n             }\r\n"
                },
                {
                    "date": 1624704805654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -486,9 +486,9 @@\n             let btnTemp = btn as fgui.GLoader3D;\r\n             btnTemp.animationName = this._animateName[btn.name].play;\r\n         }\r\n \r\n-        cc.tween(btn)\r\n+        cc.tween(this)\r\n             .delay(this._soundFile[name].time)\r\n             .call(() => {\r\n \r\n                 if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1624704965583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,8 +404,9 @@\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n+                console.log('=== 33333  ===');\r\n                 cc.Tween.stopAll();\r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n"
                },
                {
                    "date": 1624704975869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -404,9 +404,9 @@\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n-                console.log('=== 33333  ===');\r\n+                console.log('=== 33333  ===' + oldState.clickPlayName);\r\n                 cc.Tween.stopAll();\r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n"
                },
                {
                    "date": 1624704984600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,8 +405,9 @@\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n                 console.log('=== 33333  ===' + oldState.clickPlayName);\r\n+\r\n                 cc.Tween.stopAll();\r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n                 btnTemp.animationName = this._animateName[btn.name].idle;\r\n"
                },
                {
                    "date": 1624705101427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,11 +402,12 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n+            console.log('==== oldState ===' + oldState.clickPlayName);\r\n+            console.log('==== oldState ===' + oldState.clickPlayName);\r\n \r\n-                console.log('=== 33333  ===' + oldState.clickPlayName);\r\n+            if (this._isAnimateShow) {\r\n \r\n                 cc.Tween.stopAll();\r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n"
                },
                {
                    "date": 1624705106549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -403,9 +403,9 @@\n \r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n             console.log('==== oldState ===' + oldState.clickPlayName);\r\n-            console.log('==== oldState ===' + oldState.clickPlayName);\r\n+            console.log('==== state ===' + state.clickPlayName);\r\n \r\n             if (this._isAnimateShow) {\r\n \r\n                 cc.Tween.stopAll();\r\n"
                },
                {
                    "date": 1624705140070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n \r\n             console.log('==== oldState ===' + oldState.clickPlayName);\r\n             console.log('==== state ===' + state.clickPlayName);\r\n \r\n-            if (this._isAnimateShow) {\r\n+            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n                 cc.Tween.stopAll();\r\n                 let btn = this._options[oldState.clickPlayName];\r\n                 let btnTemp = btn as fgui.GLoader3D;\r\n"
                },
                {
                    "date": 1624705173916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,10 +402,8 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n-            console.log('==== oldState ===' + oldState.clickPlayName);\r\n-            console.log('==== state ===' + state.clickPlayName);\r\n \r\n             if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n \r\n                 cc.Tween.stopAll();\r\n"
                },
                {
                    "date": 1624705250499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -402,17 +402,8 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n \r\n-\r\n-            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n-\r\n-                cc.Tween.stopAll();\r\n-                let btn = this._options[oldState.clickPlayName];\r\n-                let btnTemp = btn as fgui.GLoader3D;\r\n-                btnTemp.animationName = this._animateName[btn.name].idle;\r\n-            }\r\n-\r\n             if (state.clickPlayName != '') {\r\n \r\n                 this.playClickYueQi(state.clickPlayName);\r\n             }\r\n@@ -476,8 +467,12 @@\n \r\n     async playClickYueQi(name: string) {\r\n \r\n         cc.audioEngine.stopAllEffects();\r\n+        for (let key in this._options) {\r\n+            let btn1 = this._options[key]\r\n+\r\n+        }\r\n         let btn = this._options[name];\r\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n"
                },
                {
                    "date": 1624705259624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -468,9 +468,11 @@\n     async playClickYueQi(name: string) {\r\n \r\n         cc.audioEngine.stopAllEffects();\r\n         for (let key in this._options) {\r\n-            let btn1 = this._options[key]\r\n+            let btn1 = this._options[key];\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n \r\n         }\r\n         let btn = this._options[name];\r\n         let item = null;\r\n"
                },
                {
                    "date": 1624705272642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -469,10 +469,10 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         for (let key in this._options) {\r\n             let btn1 = this._options[key];\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n+            let btnTemp1 = btn1 as fgui.GLoader3D;\r\n+            btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n \r\n         }\r\n         let btn = this._options[name];\r\n         let item = null;\r\n"
                },
                {
                    "date": 1624705272878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,649 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            move: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = true;\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.move = false;\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        for (let key in this._options) {\r\n+            let btn1 = this._options[key];\r\n+            let btnTemp1 = btn1 as fgui.GLoader3D;\r\n+            btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n+\r\n+        }\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(this)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624705279592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -468,662 +468,14 @@\n     async playClickYueQi(name: string) {\r\n \r\n         cc.audioEngine.stopAllEffects();\r\n         for (let key in this._options) {\r\n+\r\n             let btn1 = this._options[key];\r\n             let btnTemp1 = btn1 as fgui.GLoader3D;\r\n             btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n-\r\n         }\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n \r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(this)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            move: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        for (let key in this._options) {\r\n-            let btn1 = this._options[key];\r\n-            let btnTemp1 = btn1 as fgui.GLoader3D;\r\n-            btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n-\r\n-        }\r\n         let btn = this._options[name];\r\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n"
                },
                {
                    "date": 1624705357588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,15 +467,18 @@\n \r\n     async playClickYueQi(name: string) {\r\n \r\n         cc.audioEngine.stopAllEffects();\r\n-        for (let key in this._options) {\r\n+        if (this._isAnimateShow) {\r\n+            for (let key in this._options) {\r\n \r\n-            let btn1 = this._options[key];\r\n-            let btnTemp1 = btn1 as fgui.GLoader3D;\r\n-            btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n+                let btn1 = this._options[key];\r\n+                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n+                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n+            }\r\n         }\r\n \r\n+\r\n         let btn = this._options[name];\r\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n"
                },
                {
                    "date": 1624705363266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,8 @@\n                 btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n             }\r\n         }\r\n \r\n-\r\n         let btn = this._options[name];\r\n         let item = null;\r\n         item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n         let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n"
                },
                {
                    "date": 1624705819213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,8 @@\n         this._state = {\r\n             title: false,\r\n             laBaGuaiPlay: false,\r\n             submit: false,\r\n-            move: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n             magicDragPen: this._cachDragPos,\r\n             drag: \"end\",\r\n@@ -249,9 +248,8 @@\n         cc.audioEngine.playEffect(this._clickSound, false);\r\n \r\n         evt.captureTouch();\r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = true;\r\n         state.drag = 'start';\r\n         this.updateState(state);\r\n \r\n     }\r\n@@ -270,9 +268,8 @@\n         var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n         let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n \r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.move = false;\r\n         state.drag = 'end';\r\n         for (var key in this._optionsRect) {\r\n \r\n             let rect = this._optionsRect[key];\r\n"
                },
                {
                    "date": 1624705866537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,649 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        if (this._isAnimateShow) {\r\n+            for (let key in this._options) {\r\n+\r\n+                let btn1 = this._options[key];\r\n+                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n+                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n+            }\r\n+        }\r\n+\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(this)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624705872166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -646,653 +646,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        if (this._isAnimateShow) {\r\n-            for (let key in this._options) {\r\n-\r\n-                let btn1 = this._options[key];\r\n-                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n-                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n-            }\r\n-        }\r\n-\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(this)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624864975630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,649 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        if (this._isAnimateShow) {\r\n+            for (let key in this._options) {\r\n+\r\n+                let btn1 = this._options[key];\r\n+                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n+                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n+            }\r\n+        }\r\n+\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(this)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624864983462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -646,653 +646,4 @@\n         this.relieveState();\r\n         cc.audioEngine.stopAll();\r\n     }\r\n }\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n-\r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        if (this._isAnimateShow) {\r\n-            for (let key in this._options) {\r\n-\r\n-                let btn1 = this._options[key];\r\n-                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n-                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n-            }\r\n-        }\r\n-\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(this)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n"
                },
                {
                    "date": 1624867859362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,10 +244,8 @@\n     }\r\n \r\n     private _onDragStart(evt: fgui.Event): void {\r\n \r\n-        cc.audioEngine.playEffect(this._clickSound, false);\r\n-\r\n         evt.captureTouch();\r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.drag = 'start';\r\n         this.updateState(state);\r\n@@ -366,8 +364,9 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n+            cc.audioEngine.playEffect(this._clickSound, false);\r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n"
                },
                {
                    "date": 1624867873663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -369,8 +369,9 @@\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n+            cc.audioEngine.playEffect(this._clickSound, false);\r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n"
                },
                {
                    "date": 1624867874074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,649 @@\n+\r\n+/*\r\n+ * @Descripttion: \r\n+ * @version: \r\n+ * @Author: ruzhuan\r\n+ * @Date: 2021-06-07 14:40:00\r\n+ * @LastEditors: ruzhuan\r\n+ * @LastEditTime: 2021-06-07 14:40:00\r\n+ */\r\n+const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n+const { ccclass, property } = cc._decorator;\r\n+\r\n+@ccclass\r\n+export default class choose_model03_v1 extends cc.Component {\r\n+    private _worldRoot: cc.Node;\r\n+    private _view: fgui.GComponent;\r\n+    private _c1: fgui.Controller;\r\n+\r\n+    private _submit: fgui.GButton;\r\n+    private _title: fgui.GButton;\r\n+    private _titleTrigger: fgui.GLoader;\r\n+\r\n+    // 选项集合\r\n+    private _options = {};\r\n+\r\n+    private _lightSelect = {};\r\n+\r\n+    private _rightSoundFile = [];\r\n+\r\n+    private _magicPen: fgui.GButton;\r\n+\r\n+    private _magicPenData = [];\r\n+\r\n+    private _optionsRect = {};\r\n+\r\n+    private _package: any;\r\n+\r\n+    private _labaguai: fgui.GButton;\r\n+\r\n+    private _isAnimateShow: boolean = false;\r\n+\r\n+    private _soundFile = {};\r\n+\r\n+    private _animateName = {};\r\n+\r\n+    private _rigthName = [];\r\n+\r\n+    private _clickSound: cc.AudioClip;\r\n+\r\n+    private _dragSound: cc.AudioClip;\r\n+\r\n+    private _laba2: fgui.GLoader3D;\r\n+\r\n+    private _guideName: string;\r\n+\r\n+    private _overAnimShow: fgui.GGroup;\r\n+    private _overPiano: fgui.GLoader3D;\r\n+    private _overGu: fgui.GLoader3D;\r\n+\r\n+    private _scheduleTime = 0.3;\r\n+    private _dragging = false;\r\n+    private _cachDragPos = { x: 0, y: 0 }\r\n+\r\n+    private submitType: any = cc.Enum({\r\n+\r\n+        No: 0,\r\n+        GuideShow: 1,\r\n+        WrongFeed: 2,\r\n+        RightFeed: 3\r\n+    });\r\n+\r\n+    // 远程动态组件\r\n+    private feedback: any;\r\n+\r\n+    private _state = {};\r\n+\r\n+    get state(): any {\r\n+        return this._state;\r\n+    }\r\n+\r\n+    set state(v: any) {\r\n+        this.updateUi(this._state, v);\r\n+        this._state = v;\r\n+        this.mergeState();\r\n+    }\r\n+\r\n+    onLoad() {\r\n+        this._worldRoot = cc.find(\"Canvas\").parent;\r\n+\r\n+        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n+        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n+\r\n+        fgui.GRoot.inst.addChild(this._view);\r\n+\r\n+        this._c1 = this._view.getController(\"c1\");\r\n+        // 臨時\r\n+        // bug 初始设置不播放不生效\r\n+        if (this._c1) {\r\n+            this._c1.selectedIndex = 1;\r\n+            this._c1.selectedIndex = 0;\r\n+        }\r\n+\r\n+        this._submit = this._view.getChild(\"submit\").asButton;\r\n+        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n+\r\n+        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n+        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n+\r\n+        this._title = this._view.getChild(\"title\").asButton;\r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n+        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n+        let tempLight = {};\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == lightGroup) {\r\n+                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n+                node.visible = false;\r\n+                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n+                this._lightSelect[subName] = node;\r\n+                tempLight[subName] = false;\r\n+            }\r\n+        }\r\n+\r\n+        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n+        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n+        this._laba2.animationName = 'idle';\r\n+        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n+\r\n+        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n+        this._magicPen.draggable = true;\r\n+        this._cachDragPos.x = this._magicPen.x;\r\n+        this._cachDragPos.y = this._magicPen.y;\r\n+\r\n+        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n+\r\n+        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n+        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n+\r\n+        // 初始化state\r\n+        this._state = {\r\n+            title: false,\r\n+            laBaGuaiPlay: false,\r\n+            submit: false,\r\n+            lightSelect: tempLight,\r\n+            clickPlayName: '',\r\n+            magicDragPen: this._cachDragPos,\r\n+            drag: \"end\",\r\n+        }\r\n+\r\n+        // 临时 \r\n+        // 禁止操作期间 切页\r\n+        this.disableForbidHandle();\r\n+        // 销毁反馈\r\n+        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n+        if (feedback) feedback.destroy();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+\r\n+    async init(data: any) {\r\n+        // 临时 model component json 配置加载\r\n+        let { pathConfig, model, components } = data;\r\n+        let Package = pathConfig.packageName;\r\n+        let GComponent = model.uiPath;\r\n+        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n+        this._package = Package;\r\n+\r\n+        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n+\r\n+        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n+        if (soundFile) this._soundFile = soundFile;\r\n+        if (rightSoundFile) {\r\n+\r\n+            for (let i = 0; i < rightSoundFile.length; i++) {\r\n+                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n+                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n+                this._rightSoundFile.push(tempMap);\r\n+            }\r\n+        }\r\n+        if (animateName) this._animateName = animateName;\r\n+        if (rightName) this._rigthName = rightName;\r\n+\r\n+        if (optionsRect) {\r\n+\r\n+            for (var key in optionsRect) {\r\n+\r\n+                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n+                this._optionsRect[key] = tempRect;\r\n+            }\r\n+        }\r\n+\r\n+        if (guideName) this._guideName = guideName;\r\n+\r\n+        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n+        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n+        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n+\r\n+        if (this._isAnimateShow) {\r\n+            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n+            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n+            this._overAnimShow.visible = false;\r\n+\r\n+            this._overPiano.animationName = this._animateName['piano'].idle;\r\n+            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+            this._overGu.animationName = this._animateName['gu'].idle;\r\n+            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+        }\r\n+        if (components) {\r\n+            for (const key in components) {\r\n+                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n+                let componentBundle: any = await loadBundle(componentPath);\r\n+                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n+                this[key] = componentPrefab;\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private _onDragStart(evt: fgui.Event): void {\r\n+\r\n+        evt.captureTouch();\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = 'start';\r\n+        this.updateState(state);\r\n+\r\n+    }\r\n+\r\n+    private _onDragMove(evt: fgui.Event): void {\r\n+\r\n+        this._dragging = true;\r\n+\r\n+    }\r\n+\r\n+    private _onDragEnd(evt: fgui.Event): void {\r\n+        this._dragging = false;\r\n+\r\n+        cc.audioEngine.playEffect(this._dragSound, false);\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.drag = 'end';\r\n+        for (var key in this._optionsRect) {\r\n+\r\n+            let rect = this._optionsRect[key];\r\n+            if (rect.intersects(btnRect)) {\r\n+\r\n+                state.lightSelect[key] = !state.lightSelect[key];\r\n+                break;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickTitle(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.title = true;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickLaBaGuai(evt: any) {\r\n+\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.laBaGuaiPlay = true;\r\n+        state.clickPlayName = '';\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private async _clickOption(evt: any) {\r\n+\r\n+        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        state.clickPlayName = btn.name;\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    private _clickSubmit(evt: any) {\r\n+        let state: any = globalThis._.cloneDeep(this._state);\r\n+        let num = 0;\r\n+        let submitNames = [];\r\n+        for (var key in state.lightSelect) {\r\n+\r\n+            if (state.lightSelect[key]) {\r\n+                num++;\r\n+                submitNames.push(key);\r\n+            }\r\n+        }\r\n+        if (num === 0) {\r\n+            state.submit = this.submitType.GuideShow;\r\n+        } else {\r\n+\r\n+            let submitNamesTemp = submitNames.sort();\r\n+            let right = this._rigthName.sort();\r\n+            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n+                state.submit = this.submitType.RightFeed;\r\n+\r\n+            } else {\r\n+                state.submit = this.submitType.WrongFeed;\r\n+            }\r\n+        }\r\n+        this.updateState(state);\r\n+    }\r\n+\r\n+    // 临时\r\n+    // 拖拽定时器\r\n+    dragSchedule() {\r\n+        if (this._dragging) {\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.drag = \"move\";\r\n+            state.magicDragPen = {\r\n+                x: this._magicPen.x,\r\n+                y: this._magicPen.y,\r\n+            };\r\n+            this.updateState(state);\r\n+        }\r\n+    }\r\n+\r\n+    // 获取状态\r\n+    getState(data: any) {\r\n+        this.updateState(data);\r\n+    }\r\n+\r\n+    // 更新状态层\r\n+    updateState(curState: any) {\r\n+        if (globalThis._.isEqual(this._state, curState)) return;\r\n+        this.state = curState;\r\n+    }\r\n+\r\n+    // 更新ui层\r\n+    updateUi(oldState: any, state: any) {\r\n+\r\n+        if (state.drag == \"move\") {\r\n+\r\n+            this._magicPen.x = state.magicDragPen.x;\r\n+            this._magicPen.y = state.magicDragPen.y;\r\n+\r\n+        } else if (state.drag == \"start\") {\r\n+\r\n+            cc.audioEngine.playEffect(this._clickSound, false);\r\n+            this._magicPen.icon = this._magicPenData[1].icon;\r\n+\r\n+        } else if (state.drag == \"end\") {\r\n+\r\n+            cc.audioEngine.playEffect(this._clickSound, false);\r\n+            this._magicPen.x = this._cachDragPos.x;\r\n+            this._magicPen.y = this._cachDragPos.y;\r\n+\r\n+            this._magicPen.icon = this._magicPenData[0].icon;\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n+\r\n+            // 控制反馈动画和指引动画\r\n+            if (state.submit === this.submitType.GuideShow) {\r\n+\r\n+                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n+\r\n+            } else if (state.submit === this.submitType.WrongFeed) {\r\n+                this.answerFeedback(false);\r\n+            } else if (state.submit === this.submitType.RightFeed) {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    this.playOverShowAnimate();\r\n+\r\n+                } else {\r\n+                    this.answerFeedback(true);\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n+\r\n+            if (state.clickPlayName != '') {\r\n+\r\n+                this.playClickYueQi(state.clickPlayName);\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n+            this.playLaBaGuai(state.laBaGuaiPlay);\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n+\r\n+            for (var key in state.lightSelect) {\r\n+\r\n+                this._lightSelect[key].visible = state.lightSelect[key];\r\n+            }\r\n+        }\r\n+\r\n+        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n+            this.playTitle(state.title);\r\n+        }\r\n+    }\r\n+\r\n+\r\n+    async playOverShowAnimate() {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        this._overAnimShow.visible = true;\r\n+\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        this._overPiano.animationName = this._animateName['piano'].play;\r\n+\r\n+        cc.tween(this._overPiano)\r\n+            .delay(this._soundFile['piano'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overAnimShow.visible = false;\r\n+                this.answerFeedback(true);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio2, false, 1);\r\n+\r\n+        this._overGu.animationName = this._animateName['gu'].play;\r\n+\r\n+        cc.tween(this._overGu)\r\n+            .delay(this._soundFile['gu'].time)\r\n+            .call(() => {\r\n+\r\n+                this._overGu.animationName = this._animateName['gu'].idle;\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    async playClickYueQi(name: string) {\r\n+\r\n+        cc.audioEngine.stopAllEffects();\r\n+        if (this._isAnimateShow) {\r\n+            for (let key in this._options) {\r\n+\r\n+                let btn1 = this._options[key];\r\n+                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n+                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n+            }\r\n+        }\r\n+\r\n+        let btn = this._options[name];\r\n+        let item = null;\r\n+        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n+        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+        if (this._isAnimateShow) {\r\n+\r\n+            let btnTemp = btn as fgui.GLoader3D;\r\n+            btnTemp.animationName = this._animateName[btn.name].play;\r\n+        }\r\n+\r\n+        cc.tween(this)\r\n+            .delay(this._soundFile[name].time)\r\n+            .call(() => {\r\n+\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    let btnTemp = btn as fgui.GLoader3D;\r\n+                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n+                }\r\n+\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.clickPlayName = '';\r\n+                this.updateState(state);\r\n+\r\n+            })\r\n+            .start();\r\n+\r\n+\r\n+    }\r\n+\r\n+    async playTitle(bool: boolean) {\r\n+        this._c1.selectedIndex = bool ? 1 : 0;\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n+            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n+            let audioId = cc.audioEngine.play(audio, false, 1);\r\n+            cc.audioEngine.setFinishCallback(audioId, () => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.title = false;\r\n+                this.updateState(state);\r\n+            });\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    playLaBaGuai(bool: boolean) {\r\n+        if (bool) {\r\n+            cc.audioEngine.stopAll();\r\n+            this.forbidHandle();\r\n+            let curIndex = 0;\r\n+            this._laba2.animationName = 'play';\r\n+            this.playRightSound(curIndex);\r\n+\r\n+        } else {\r\n+            this.disableForbidHandle();\r\n+        }\r\n+    }\r\n+\r\n+    async playRightSound(curIndex: number) {\r\n+\r\n+        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n+        cc.audioEngine.play(audio, false, 1);\r\n+\r\n+        cc.tween(this._labaguai)\r\n+            .delay(this._rightSoundFile[curIndex].time)\r\n+            .call(() => {\r\n+\r\n+                if (curIndex >= this._rightSoundFile.length - 1) {\r\n+\r\n+                    this._laba2.animationName = 'idle';\r\n+                    let state: any = globalThis._.cloneDeep(this._state);\r\n+                    state.laBaGuaiPlay = false;\r\n+                    this.updateState(state);\r\n+\r\n+                } else {\r\n+                    curIndex++;\r\n+                    this.playRightSound(curIndex);\r\n+                }\r\n+\r\n+            })\r\n+            .start();\r\n+    }\r\n+\r\n+    answerFeedback(bool: boolean) {\r\n+        if (!this.feedback) return;\r\n+        let feedback: any = cc.instantiate(this.feedback);\r\n+        feedback.x = 960;\r\n+        feedback.y = 540;\r\n+        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n+        feedbackJs.init(bool);\r\n+        feedback.parent = cc.find(\"Canvas\").parent;\r\n+\r\n+        setTimeout(() => {\r\n+            feedback.destroy();\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state);\r\n+        }, 2000);\r\n+    }\r\n+\r\n+    /**\r\n+         * 拖动指引\r\n+         * @param fromObj start\r\n+         * @param toObj end\r\n+         */\r\n+    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n+        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n+        this._view.addChild(hand);\r\n+        hand.x = fromObj.x;\r\n+        hand.y = fromObj.y;\r\n+        cc.tween(hand).to(0.8, {\r\n+            x: toObj.x,\r\n+            y: toObj.y\r\n+        }).call(() => {\r\n+            this._view.removeChild(hand);\r\n+            hand = null;\r\n+            let state: any = globalThis._.cloneDeep(this._state);\r\n+            state.submit = this.submitType.No;\r\n+            this.updateState(state)\r\n+        }).start();\r\n+    }\r\n+\r\n+\r\n+    // 运行时 禁止操作\r\n+    forbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (!handleMask) {\r\n+            let handleMask = new cc.Node('handleMask');\r\n+            handleMask.addComponent(cc.BlockInputEvents);\r\n+            handleMask.parent = this._worldRoot;\r\n+            handleMask.width = 1920;\r\n+            handleMask.height = 1080;\r\n+            handleMask.x = 960;\r\n+            handleMask.y = 540;\r\n+        }\r\n+    }\r\n+\r\n+    // 消除禁止\r\n+    disableForbidHandle() {\r\n+        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n+        if (handleMask) handleMask.destroy();\r\n+    }\r\n+\r\n+    // 注册状态，及获取状态的方法\r\n+    registerState() {\r\n+        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n+    }\r\n+\r\n+    // 解除状态，及获取状态的方法\r\n+    relieveState() {\r\n+        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n+    }\r\n+\r\n+    // 本组件状态合并到全局\r\n+    mergeState() {\r\n+        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n+    }\r\n+\r\n+    onEnable() {\r\n+        this.registerState();\r\n+        this.schedule(this.dragSchedule, this._scheduleTime);\r\n+    }\r\n+\r\n+    onDisable() {\r\n+        cc.Tween.stopAll();\r\n+        this.relieveState();\r\n+        cc.audioEngine.stopAll();\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1624867925369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,10 +260,8 @@\n \r\n     private _onDragEnd(evt: fgui.Event): void {\r\n         this._dragging = false;\r\n \r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n         var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n         let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n \r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n@@ -369,658 +367,10 @@\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n-            cc.audioEngine.playEffect(this._clickSound, false);\r\n-            this._magicPen.x = this._cachDragPos.x;\r\n-            this._magicPen.y = this._cachDragPos.y;\r\n+            cc.audioEngine.playEffect(this._dragSound, false);\r\n \r\n-            this._magicPen.icon = this._magicPenData[0].icon;\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n-\r\n-            // 控制反馈动画和指引动画\r\n-            if (state.submit === this.submitType.GuideShow) {\r\n-\r\n-                this.handTips1(this._magicPen, this._options[this._guideName]);\r\n-\r\n-            } else if (state.submit === this.submitType.WrongFeed) {\r\n-                this.answerFeedback(false);\r\n-            } else if (state.submit === this.submitType.RightFeed) {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n-\r\n-            if (state.clickPlayName != '') {\r\n-\r\n-                this.playClickYueQi(state.clickPlayName);\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n-            this.playLaBaGuai(state.laBaGuaiPlay);\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n-\r\n-            for (var key in state.lightSelect) {\r\n-\r\n-                this._lightSelect[key].visible = state.lightSelect[key];\r\n-            }\r\n-        }\r\n-\r\n-        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n-            this.playTitle(state.title);\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    async playOverShowAnimate() {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        this._overAnimShow.visible = true;\r\n-\r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n-        let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n-\r\n-        cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n-        let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio2, false, 1);\r\n-\r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n-\r\n-        cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n-            .call(() => {\r\n-\r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    async playClickYueQi(name: string) {\r\n-\r\n-        cc.audioEngine.stopAllEffects();\r\n-        if (this._isAnimateShow) {\r\n-            for (let key in this._options) {\r\n-\r\n-                let btn1 = this._options[key];\r\n-                let btnTemp1 = btn1 as fgui.GLoader3D;\r\n-                btnTemp1.animationName = this._animateName[btn1.name].idle;\r\n-            }\r\n-        }\r\n-\r\n-        let btn = this._options[name];\r\n-        let item = null;\r\n-        item = fgui.UIPackage.getItemByURL(this._soundFile[name].path);\r\n-        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-        if (this._isAnimateShow) {\r\n-\r\n-            let btnTemp = btn as fgui.GLoader3D;\r\n-            btnTemp.animationName = this._animateName[btn.name].play;\r\n-        }\r\n-\r\n-        cc.tween(this)\r\n-            .delay(this._soundFile[name].time)\r\n-            .call(() => {\r\n-\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    let btnTemp = btn as fgui.GLoader3D;\r\n-                    btnTemp.animationName = this._animateName[btn.name].idle;\r\n-                }\r\n-\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.clickPlayName = '';\r\n-                this.updateState(state);\r\n-\r\n-            })\r\n-            .start();\r\n-\r\n-\r\n-    }\r\n-\r\n-    async playTitle(bool: boolean) {\r\n-        this._c1.selectedIndex = bool ? 1 : 0;\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n-            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n-            let audioId = cc.audioEngine.play(audio, false, 1);\r\n-            cc.audioEngine.setFinishCallback(audioId, () => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.title = false;\r\n-                this.updateState(state);\r\n-            });\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    playLaBaGuai(bool: boolean) {\r\n-        if (bool) {\r\n-            cc.audioEngine.stopAll();\r\n-            this.forbidHandle();\r\n-            let curIndex = 0;\r\n-            this._laba2.animationName = 'play';\r\n-            this.playRightSound(curIndex);\r\n-\r\n-        } else {\r\n-            this.disableForbidHandle();\r\n-        }\r\n-    }\r\n-\r\n-    async playRightSound(curIndex: number) {\r\n-\r\n-        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].path.file, cc.AudioClip);\r\n-        cc.audioEngine.play(audio, false, 1);\r\n-\r\n-        cc.tween(this._labaguai)\r\n-            .delay(this._rightSoundFile[curIndex].time)\r\n-            .call(() => {\r\n-\r\n-                if (curIndex >= this._rightSoundFile.length - 1) {\r\n-\r\n-                    this._laba2.animationName = 'idle';\r\n-                    let state: any = globalThis._.cloneDeep(this._state);\r\n-                    state.laBaGuaiPlay = false;\r\n-                    this.updateState(state);\r\n-\r\n-                } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n-                }\r\n-\r\n-            })\r\n-            .start();\r\n-    }\r\n-\r\n-    answerFeedback(bool: boolean) {\r\n-        if (!this.feedback) return;\r\n-        let feedback: any = cc.instantiate(this.feedback);\r\n-        feedback.x = 960;\r\n-        feedback.y = 540;\r\n-        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n-        feedbackJs.init(bool);\r\n-        feedback.parent = cc.find(\"Canvas\").parent;\r\n-\r\n-        setTimeout(() => {\r\n-            feedback.destroy();\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state);\r\n-        }, 2000);\r\n-    }\r\n-\r\n-    /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n-    handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n-        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n-        this._view.addChild(hand);\r\n-        hand.x = fromObj.x;\r\n-        hand.y = fromObj.y;\r\n-        cc.tween(hand).to(0.8, {\r\n-            x: toObj.x,\r\n-            y: toObj.y\r\n-        }).call(() => {\r\n-            this._view.removeChild(hand);\r\n-            hand = null;\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.submit = this.submitType.No;\r\n-            this.updateState(state)\r\n-        }).start();\r\n-    }\r\n-\r\n-\r\n-    // 运行时 禁止操作\r\n-    forbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (!handleMask) {\r\n-            let handleMask = new cc.Node('handleMask');\r\n-            handleMask.addComponent(cc.BlockInputEvents);\r\n-            handleMask.parent = this._worldRoot;\r\n-            handleMask.width = 1920;\r\n-            handleMask.height = 1080;\r\n-            handleMask.x = 960;\r\n-            handleMask.y = 540;\r\n-        }\r\n-    }\r\n-\r\n-    // 消除禁止\r\n-    disableForbidHandle() {\r\n-        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n-        if (handleMask) handleMask.destroy();\r\n-    }\r\n-\r\n-    // 注册状态，及获取状态的方法\r\n-    registerState() {\r\n-        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n-    }\r\n-\r\n-    // 解除状态，及获取状态的方法\r\n-    relieveState() {\r\n-        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n-    }\r\n-\r\n-    // 本组件状态合并到全局\r\n-    mergeState() {\r\n-        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n-    }\r\n-\r\n-    onEnable() {\r\n-        this.registerState();\r\n-        this.schedule(this.dragSchedule, this._scheduleTime);\r\n-    }\r\n-\r\n-    onDisable() {\r\n-        cc.Tween.stopAll();\r\n-        this.relieveState();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-}\r\n-\r\n-/*\r\n- * @Descripttion: \r\n- * @version: \r\n- * @Author: ruzhuan\r\n- * @Date: 2021-06-07 14:40:00\r\n- * @LastEditors: ruzhuan\r\n- * @LastEditTime: 2021-06-07 14:40:00\r\n- */\r\n-const { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\n-const { ccclass, property } = cc._decorator;\r\n-\r\n-@ccclass\r\n-export default class choose_model03_v1 extends cc.Component {\r\n-    private _worldRoot: cc.Node;\r\n-    private _view: fgui.GComponent;\r\n-    private _c1: fgui.Controller;\r\n-\r\n-    private _submit: fgui.GButton;\r\n-    private _title: fgui.GButton;\r\n-    private _titleTrigger: fgui.GLoader;\r\n-\r\n-    // 选项集合\r\n-    private _options = {};\r\n-\r\n-    private _lightSelect = {};\r\n-\r\n-    private _rightSoundFile = [];\r\n-\r\n-    private _magicPen: fgui.GButton;\r\n-\r\n-    private _magicPenData = [];\r\n-\r\n-    private _optionsRect = {};\r\n-\r\n-    private _package: any;\r\n-\r\n-    private _labaguai: fgui.GButton;\r\n-\r\n-    private _isAnimateShow: boolean = false;\r\n-\r\n-    private _soundFile = {};\r\n-\r\n-    private _animateName = {};\r\n-\r\n-    private _rigthName = [];\r\n-\r\n-    private _clickSound: cc.AudioClip;\r\n-\r\n-    private _dragSound: cc.AudioClip;\r\n-\r\n-    private _laba2: fgui.GLoader3D;\r\n-\r\n-    private _guideName: string;\r\n-\r\n-    private _overAnimShow: fgui.GGroup;\r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n-    private _scheduleTime = 0.3;\r\n-    private _dragging = false;\r\n-    private _cachDragPos = { x: 0, y: 0 }\r\n-\r\n-    private submitType: any = cc.Enum({\r\n-\r\n-        No: 0,\r\n-        GuideShow: 1,\r\n-        WrongFeed: 2,\r\n-        RightFeed: 3\r\n-    });\r\n-\r\n-    // 远程动态组件\r\n-    private feedback: any;\r\n-\r\n-    private _state = {};\r\n-\r\n-    get state(): any {\r\n-        return this._state;\r\n-    }\r\n-\r\n-    set state(v: any) {\r\n-        this.updateUi(this._state, v);\r\n-        this._state = v;\r\n-        this.mergeState();\r\n-    }\r\n-\r\n-    onLoad() {\r\n-        this._worldRoot = cc.find(\"Canvas\").parent;\r\n-\r\n-        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n-        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n-\r\n-        fgui.GRoot.inst.addChild(this._view);\r\n-\r\n-        this._c1 = this._view.getController(\"c1\");\r\n-        // 臨時\r\n-        // bug 初始设置不播放不生效\r\n-        if (this._c1) {\r\n-            this._c1.selectedIndex = 1;\r\n-            this._c1.selectedIndex = 0;\r\n-        }\r\n-\r\n-        this._submit = this._view.getChild(\"submit\").asButton;\r\n-        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n-\r\n-        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n-        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n-\r\n-        this._title = this._view.getChild(\"title\").asButton;\r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n-            }\r\n-        }\r\n-\r\n-        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n-        let tempLight = {};\r\n-\r\n-        for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == lightGroup) {\r\n-                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n-                node.visible = false;\r\n-                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n-                this._lightSelect[subName] = node;\r\n-                tempLight[subName] = false;\r\n-            }\r\n-        }\r\n-\r\n-        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n-        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._laba2 = this._view.getChild(\"laba2\") as fgui.GLoader3D;\r\n-        this._laba2.animationName = 'idle';\r\n-        if (this._laba2) this._laba2.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n-\r\n-        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n-        this._magicPen.draggable = true;\r\n-        this._cachDragPos.x = this._magicPen.x;\r\n-        this._cachDragPos.y = this._magicPen.y;\r\n-\r\n-        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n-\r\n-        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n-        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n-\r\n-        // 初始化state\r\n-        this._state = {\r\n-            title: false,\r\n-            laBaGuaiPlay: false,\r\n-            submit: false,\r\n-            lightSelect: tempLight,\r\n-            clickPlayName: '',\r\n-            magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n-        }\r\n-\r\n-        // 临时 \r\n-        // 禁止操作期间 切页\r\n-        this.disableForbidHandle();\r\n-        // 销毁反馈\r\n-        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n-        if (feedback) feedback.destroy();\r\n-        cc.audioEngine.stopAll();\r\n-    }\r\n-\r\n-    async init(data: any) {\r\n-        // 临时 model component json 配置加载\r\n-        let { pathConfig, model, components } = data;\r\n-        let Package = pathConfig.packageName;\r\n-        let GComponent = model.uiPath;\r\n-        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect, guideName } = model.config;\r\n-        this._package = Package;\r\n-\r\n-        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n-\r\n-        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n-        if (soundFile) this._soundFile = soundFile;\r\n-        if (rightSoundFile) {\r\n-\r\n-            for (let i = 0; i < rightSoundFile.length; i++) {\r\n-                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i].path);\r\n-                let tempMap = { 'path': item, 'time': rightSoundFile[i].time };\r\n-                this._rightSoundFile.push(tempMap);\r\n-            }\r\n-        }\r\n-        if (animateName) this._animateName = animateName;\r\n-        if (rightName) this._rigthName = rightName;\r\n-\r\n-        if (optionsRect) {\r\n-\r\n-            for (var key in optionsRect) {\r\n-\r\n-                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n-                this._optionsRect[key] = tempRect;\r\n-            }\r\n-        }\r\n-\r\n-        if (guideName) this._guideName = guideName;\r\n-\r\n-        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n-        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n-        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n-\r\n-        if (this._isAnimateShow) {\r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-        }\r\n-        if (components) {\r\n-            for (const key in components) {\r\n-                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n-                let componentBundle: any = await loadBundle(componentPath);\r\n-                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n-                this[key] = componentPrefab;\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    private _onDragStart(evt: fgui.Event): void {\r\n-\r\n-        evt.captureTouch();\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = 'start';\r\n-        this.updateState(state);\r\n-\r\n-    }\r\n-\r\n-    private _onDragMove(evt: fgui.Event): void {\r\n-\r\n-        this._dragging = true;\r\n-\r\n-    }\r\n-\r\n-    private _onDragEnd(evt: fgui.Event): void {\r\n-        this._dragging = false;\r\n-\r\n-        cc.audioEngine.playEffect(this._dragSound, false);\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.drag = 'end';\r\n-        for (var key in this._optionsRect) {\r\n-\r\n-            let rect = this._optionsRect[key];\r\n-            if (rect.intersects(btnRect)) {\r\n-\r\n-                state.lightSelect[key] = !state.lightSelect[key];\r\n-                break;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickTitle(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.title = true;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickLaBaGuai(evt: any) {\r\n-\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.laBaGuaiPlay = true;\r\n-        state.clickPlayName = '';\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private async _clickOption(evt: any) {\r\n-\r\n-        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        state.clickPlayName = btn.name;\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    private _clickSubmit(evt: any) {\r\n-        let state: any = globalThis._.cloneDeep(this._state);\r\n-        let num = 0;\r\n-        let submitNames = [];\r\n-        for (var key in state.lightSelect) {\r\n-\r\n-            if (state.lightSelect[key]) {\r\n-                num++;\r\n-                submitNames.push(key);\r\n-            }\r\n-        }\r\n-        if (num === 0) {\r\n-            state.submit = this.submitType.GuideShow;\r\n-        } else {\r\n-\r\n-            let submitNamesTemp = submitNames.sort();\r\n-            let right = this._rigthName.sort();\r\n-            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n-                state.submit = this.submitType.RightFeed;\r\n-\r\n-            } else {\r\n-                state.submit = this.submitType.WrongFeed;\r\n-            }\r\n-        }\r\n-        this.updateState(state);\r\n-    }\r\n-\r\n-    // 临时\r\n-    // 拖拽定时器\r\n-    dragSchedule() {\r\n-        if (this._dragging) {\r\n-            let state: any = globalThis._.cloneDeep(this._state);\r\n-            state.drag = \"move\";\r\n-            state.magicDragPen = {\r\n-                x: this._magicPen.x,\r\n-                y: this._magicPen.y,\r\n-            };\r\n-            this.updateState(state);\r\n-        }\r\n-    }\r\n-\r\n-    // 获取状态\r\n-    getState(data: any) {\r\n-        this.updateState(data);\r\n-    }\r\n-\r\n-    // 更新状态层\r\n-    updateState(curState: any) {\r\n-        if (globalThis._.isEqual(this._state, curState)) return;\r\n-        this.state = curState;\r\n-    }\r\n-\r\n-    // 更新ui层\r\n-    updateUi(oldState: any, state: any) {\r\n-\r\n-        if (state.drag == \"move\") {\r\n-\r\n-            this._magicPen.x = state.magicDragPen.x;\r\n-            this._magicPen.y = state.magicDragPen.y;\r\n-\r\n-        } else if (state.drag == \"start\") {\r\n-\r\n-            cc.audioEngine.playEffect(this._clickSound, false);\r\n-            this._magicPen.icon = this._magicPenData[1].icon;\r\n-\r\n-        } else if (state.drag == \"end\") {\r\n-\r\n-            cc.audioEngine.playEffect(this._clickSound, false);\r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n"
                },
                {
                    "date": 1624867976969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,8 +377,9 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n+            cc.audioEngine.playEffect(this._clickSound, false);\r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n                 this.handTips1(this._magicPen, this._options[this._guideName]);\r\n"
                },
                {
                    "date": 1624867999195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,18 +377,20 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n-            cc.audioEngine.playEffect(this._clickSound, false);\r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n+                cc.audioEngine.playEffect(this._clickSound, false);\r\n                 this.handTips1(this._magicPen, this._options[this._guideName]);\r\n \r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n+                cc.audioEngine.playEffect(this._clickSound, false);\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n+                cc.audioEngine.playEffect(this._clickSound, false);\r\n                 if (this._isAnimateShow) {\r\n \r\n                     this.playOverShowAnimate();\r\n \r\n"
                },
                {
                    "date": 1624868054608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,20 +377,23 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n+            if (state.submit !== this.submitType.No) {\r\n+                cc.audioEngine.playEffect(this._clickSound, false);\r\n+            }\r\n+\r\n+\r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-                cc.audioEngine.playEffect(this._clickSound, false);\r\n+\r\n                 this.handTips1(this._magicPen, this._options[this._guideName]);\r\n \r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n-                cc.audioEngine.playEffect(this._clickSound, false);\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n-                cc.audioEngine.playEffect(this._clickSound, false);\r\n                 if (this._isAnimateShow) {\r\n \r\n                     this.playOverShowAnimate();\r\n \r\n"
                },
                {
                    "date": 1624868060418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,9 +381,8 @@\n             if (state.submit !== this.submitType.No) {\r\n                 cc.audioEngine.playEffect(this._clickSound, false);\r\n             }\r\n \r\n-\r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n \r\n"
                },
                {
                    "date": 1625035658891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -384,9 +384,8 @@\n \r\n             // 控制反馈动画和指引动画\r\n             if (state.submit === this.submitType.GuideShow) {\r\n \r\n-\r\n                 this.handTips1(this._magicPen, this._options[this._guideName]);\r\n \r\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n"
                },
                {
                    "date": 1625127443076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,9 @@\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n             magicDragPen: this._cachDragPos,\r\n             drag: \"end\",\r\n+            isLabaguaiHaveClick: false,\r\n         }\r\n \r\n         // 临时 \r\n         // 禁止操作期间 切页\r\n"
                },
                {
                    "date": 1625127473292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,8 +290,9 @@\n \r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.laBaGuaiPlay = true;\r\n         state.clickPlayName = '';\r\n+        state.isLabaguaiHaveClick = true;\r\n         this.updateState(state);\r\n     }\r\n \r\n     private async _clickOption(evt: any) {\r\n"
                },
                {
                    "date": 1625127491877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,9 +290,12 @@\n \r\n         let state: any = globalThis._.cloneDeep(this._state);\r\n         state.laBaGuaiPlay = true;\r\n         state.clickPlayName = '';\r\n-        state.isLabaguaiHaveClick = true;\r\n+        if (!state.isLabaguaiHaveClick) {\r\n+            state.isLabaguaiHaveClick = true;\r\n+        }\r\n+\r\n         this.updateState(state);\r\n     }\r\n \r\n     private async _clickOption(evt: any) {\r\n"
                },
                {
                    "date": 1625127499306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,8 @@\n         state.clickPlayName = '';\r\n         if (!state.isLabaguaiHaveClick) {\r\n             state.isLabaguaiHaveClick = true;\r\n         }\r\n-\r\n         this.updateState(state);\r\n     }\r\n \r\n     private async _clickOption(evt: any) {\r\n"
                },
                {
                    "date": 1625127525564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,8 +379,10 @@\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n         }\r\n \r\n+        if (!globalThis._.isEqual(oldState.submit, state.submit)) { }\r\n+        isLabaguaiHaveClick\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             if (state.submit !== this.submitType.No) {\r\n                 cc.audioEngine.playEffect(this._clickSound, false);\r\n"
                },
                {
                    "date": 1625127531593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -379,10 +379,12 @@\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n         }\r\n \r\n-        if (!globalThis._.isEqual(oldState.submit, state.submit)) { }\r\n-        isLabaguaiHaveClick\r\n+        if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n+\r\n+        }\r\n+\r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n             if (state.submit !== this.submitType.No) {\r\n                 cc.audioEngine.playEffect(this._clickSound, false);\r\n"
                },
                {
                    "date": 1625127541475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,8 +381,12 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n \r\n+            if () {\r\n+\r\n+            }\r\n+\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n \r\n"
                },
                {
                    "date": 1625127546811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,9 +381,9 @@\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n \r\n-            if () {\r\n+            if (state.isLabaguaiHaveClick) {\r\n \r\n             }\r\n \r\n         }\r\n"
                },
                {
                    "date": 1625127552195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -383,8 +383,10 @@\n         if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n \r\n             if (state.isLabaguaiHaveClick) {\r\n \r\n+            } else {\r\n+\r\n             }\r\n \r\n         }\r\n \r\n"
                },
                {
                    "date": 1625127617716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -383,8 +383,12 @@\n         if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n \r\n             if (state.isLabaguaiHaveClick) {\r\n \r\n+                for (let key in this._options) {\r\n+\r\n+                }\r\n+\r\n             } else {\r\n \r\n             }\r\n \r\n"
                },
                {
                    "date": 1625127624479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,8 +385,9 @@\n             if (state.isLabaguaiHaveClick) {\r\n \r\n                 for (let key in this._options) {\r\n \r\n+\r\n                 }\r\n \r\n             } else {\r\n \r\n"
                },
                {
                    "date": 1625127632077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,8 +386,9 @@\n \r\n                 for (let key in this._options) {\r\n \r\n \r\n+\r\n                 }\r\n \r\n             } else {\r\n \r\n"
                },
                {
                    "date": 1625127640052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,10 +385,10 @@\n             if (state.isLabaguaiHaveClick) {\r\n \r\n                 for (let key in this._options) {\r\n \r\n+                    let btn = \r\n \r\n-\r\n                 }\r\n \r\n             } else {\r\n \r\n"
                },
                {
                    "date": 1625127645637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,9 +385,9 @@\n             if (state.isLabaguaiHaveClick) {\r\n \r\n                 for (let key in this._options) {\r\n \r\n-                    let btn = \r\n+                    let btn = this._options\r\n \r\n                 }\r\n \r\n             } else {\r\n"
                },
                {
                    "date": 1625127718645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -385,10 +385,10 @@\n             if (state.isLabaguaiHaveClick) {\r\n \r\n                 for (let key in this._options) {\r\n \r\n-                    let btn = this._options\r\n-\r\n+                    let btn = this._options[key];\r\n+                    btn.touchable\r\n                 }\r\n \r\n             } else {\r\n \r\n"
                },
                {
                    "date": 1625127729836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -386,13 +386,18 @@\n \r\n                 for (let key in this._options) {\r\n \r\n                     let btn = this._options[key];\r\n-                    btn.touchable\r\n+                    btn.touchable = false;\r\n                 }\r\n \r\n             } else {\r\n \r\n+                for (let key in this._options) {\r\n+\r\n+                    let btn = this._options[key];\r\n+                    btn.touchable = false;\r\n+                }\r\n             }\r\n \r\n         }\r\n \r\n"
                },
                {
                    "date": 1625127736677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,9 +394,9 @@\n \r\n                 for (let key in this._options) {\r\n \r\n                     let btn = this._options[key];\r\n-                    btn.touchable = false;\r\n+                    btn.touchable = true;\r\n                 }\r\n             }\r\n \r\n         }\r\n"
                },
                {
                    "date": 1625128032524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,10 +580,18 @@\n                     state.laBaGuaiPlay = false;\r\n                     this.updateState(state);\r\n \r\n                 } else {\r\n-                    curIndex++;\r\n-                    this.playRightSound(curIndex);\r\n+\r\n+                    cc.tween(this)\r\n+                        .delay(0.5)\r\n+                        .call(() => {\r\n+                            curIndex++;\r\n+                            this.playRightSound(curIndex);\r\n+\r\n+                        })\r\n+                        .start()\r\n+\r\n                 }\r\n \r\n             })\r\n             .start();\r\n"
                },
                {
                    "date": 1625128043480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -589,9 +589,8 @@\n                             this.playRightSound(curIndex);\r\n \r\n                         })\r\n                         .start()\r\n-\r\n                 }\r\n \r\n             })\r\n             .start();\r\n"
                },
                {
                    "date": 1625128146513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -582,9 +582,9 @@\n \r\n                 } else {\r\n \r\n                     cc.tween(this)\r\n-                        .delay(0.5)\r\n+                        .delay(1.0)\r\n                         .call(() => {\r\n                             curIndex++;\r\n                             this.playRightSound(curIndex);\r\n \r\n"
                },
                {
                    "date": 1625128343228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,8 +366,9 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n+            console.log('==== ===');\r\n             cc.audioEngine.playEffect(this._clickSound, false);\r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n"
                },
                {
                    "date": 1625128354765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,14 +366,16 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n-            console.log('==== ===');\r\n+            console.log('==== start   111111 ===');\r\n             cc.audioEngine.playEffect(this._clickSound, false);\r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n+            console.log('==== start   111111 ===');\r\n+\r\n             cc.audioEngine.playEffect(this._dragSound, false);\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1625128368078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -372,9 +372,9 @@\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n-            console.log('==== start   111111 ===');\r\n+            console.log('==== end   111111 ===');\r\n \r\n             cc.audioEngine.playEffect(this._dragSound, false);\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n"
                },
                {
                    "date": 1625128483700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n             submit: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n             magicDragPen: this._cachDragPos,\r\n-            drag: \"end\",\r\n+            drag: \"no\",\r\n             isLabaguaiHaveClick: false,\r\n         }\r\n \r\n         // 临时 \r\n"
                },
                {
                    "date": 1625128571760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,8 +380,11 @@\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n+            setTimeout(() => {\r\n+\r\n+            });\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n \r\n"
                },
                {
                    "date": 1625128791766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,8 +381,11 @@\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n             setTimeout(() => {\r\n+                let state: any = globalThis._.cloneDeep(this._state);\r\n+                state.drag = 'end';\r\n+                this.updateState();\r\n \r\n             });\r\n         }\r\n \r\n"
                },
                {
                    "date": 1625128799244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -381,11 +381,11 @@\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n             setTimeout(() => {\r\n-                let state: any = globalThis._.cloneDeep(this._state);\r\n-                state.drag = 'end';\r\n-                this.updateState();\r\n+                let state2: any = globalThis._.cloneDeep(this._state);\r\n+                state2.drag = 'end';\r\n+                this.updateState(state2);\r\n \r\n             });\r\n         }\r\n \r\n"
                },
                {
                    "date": 1625128806716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -382,9 +382,9 @@\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n             setTimeout(() => {\r\n                 let state2: any = globalThis._.cloneDeep(this._state);\r\n-                state2.drag = 'end';\r\n+                state2.drag = 'no';\r\n                 this.updateState(state2);\r\n \r\n             });\r\n         }\r\n"
                },
                {
                    "date": 1625128818253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -380,14 +380,15 @@\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n \r\n             this._magicPen.icon = this._magicPenData[0].icon;\r\n+\r\n             setTimeout(() => {\r\n                 let state2: any = globalThis._.cloneDeep(this._state);\r\n                 state2.drag = 'no';\r\n                 this.updateState(state2);\r\n \r\n-            });\r\n+            }, 50);\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.isLabaguaiHaveClick, state.isLabaguaiHaveClick)) {\r\n \r\n"
                },
                {
                    "date": 1625128839216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,9 +166,9 @@\n             submit: false,\r\n             lightSelect: tempLight,\r\n             clickPlayName: '',\r\n             magicDragPen: this._cachDragPos,\r\n-            drag: \"no\",\r\n+            drag: 'no',\r\n             isLabaguaiHaveClick: false,\r\n         }\r\n \r\n         // 临时 \r\n"
                },
                {
                    "date": 1625129753216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,16 +366,13 @@\n             this._magicPen.y = state.magicDragPen.y;\r\n \r\n         } else if (state.drag == \"start\") {\r\n \r\n-            console.log('==== start   111111 ===');\r\n             cc.audioEngine.playEffect(this._clickSound, false);\r\n             this._magicPen.icon = this._magicPenData[1].icon;\r\n \r\n         } else if (state.drag == \"end\") {\r\n \r\n-            console.log('==== end   111111 ===');\r\n-\r\n             cc.audioEngine.playEffect(this._dragSound, false);\r\n \r\n             this._magicPen.x = this._cachDragPos.x;\r\n             this._magicPen.y = this._cachDragPos.y;\r\n"
                },
                {
                    "date": 1625129874732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,9 +463,9 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile['piano'].path);\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rightName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overPiano.animationName = this._animateName['piano'].play;\r\n"
                },
                {
                    "date": 1625129945137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,36 +463,36 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rightName[0]].path);\r\n+        let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        this._overPiano.animationName = this._animateName['piano'].play;\r\n+        this._overPiano.animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         cc.tween(this._overPiano)\r\n-            .delay(this._soundFile['piano'].time)\r\n+            .delay(this._soundFile[this._rigthName[0]].time)\r\n             .call(() => {\r\n \r\n-                this._overPiano.animationName = this._animateName['piano'].idle;\r\n+                this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n                 this._overAnimShow.visible = false;\r\n                 this.answerFeedback(true);\r\n \r\n             })\r\n             .start();\r\n \r\n-        let item2 = fgui.UIPackage.getItemByURL(this._soundFile['gu'].path);\r\n+        let item2 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[1]].path);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio2, false, 1);\r\n \r\n-        this._overGu.animationName = this._animateName['gu'].play;\r\n+        this._overGu.animationName = this._animateName[this._rigthName[1]].play;\r\n \r\n         cc.tween(this._overGu)\r\n-            .delay(this._soundFile['gu'].time)\r\n+            .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n-                this._overGu.animationName = this._animateName['gu'].idle;\r\n+                this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n \r\n             })\r\n             .start();\r\n     }\r\n"
                },
                {
                    "date": 1625130008369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -474,8 +474,12 @@\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n             .call(() => {\r\n \r\n                 this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n+\r\n+                if () {\r\n+\r\n+                }\r\n                 this._overAnimShow.visible = false;\r\n                 this.answerFeedback(true);\r\n \r\n             })\r\n"
                },
                {
                    "date": 1625130037529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,9 +475,9 @@\n             .call(() => {\r\n \r\n                 this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n \r\n-                if () {\r\n+                if (this._soundFile[this._rigthName[0]].time > this._soundFile[this._rigthName[1]].time) {\r\n \r\n                 }\r\n                 this._overAnimShow.visible = false;\r\n                 this.answerFeedback(true);\r\n"
                },
                {
                    "date": 1625130044861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,14 +475,15 @@\n             .call(() => {\r\n \r\n                 this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n \r\n-                if (this._soundFile[this._rigthName[0]].time > this._soundFile[this._rigthName[1]].time) {\r\n+                if (this._soundFile[this._rigthName[0]].time >= this._soundFile[this._rigthName[1]].time) {\r\n \r\n+                    this._overAnimShow.visible = false;\r\n+                    this.answerFeedback(true);\r\n                 }\r\n-                this._overAnimShow.visible = false;\r\n-                this.answerFeedback(true);\r\n \r\n+\r\n             })\r\n             .start();\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[1]].path);\r\n"
                },
                {
                    "date": 1625130051085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,9 +481,8 @@\n                     this._overAnimShow.visible = false;\r\n                     this.answerFeedback(true);\r\n                 }\r\n \r\n-\r\n             })\r\n             .start();\r\n \r\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[1]].path);\r\n@@ -496,9 +495,13 @@\n             .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n                 this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n+                if (this._soundFile[this._rigthName[0]].time >= this._soundFile[this._rigthName[1]].time) {\r\n \r\n+                    this._overAnimShow.visible = false;\r\n+                    this.answerFeedback(true);\r\n+                }\r\n             })\r\n             .start();\r\n     }\r\n \r\n"
                },
                {
                    "date": 1625130058474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -495,9 +495,9 @@\n             .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n                 this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n-                if (this._soundFile[this._rigthName[0]].time >= this._soundFile[this._rigthName[1]].time) {\r\n+                if (this._soundFile[this._rigthName[1]].time >= this._soundFile[this._rigthName[0]].time) {\r\n \r\n                     this._overAnimShow.visible = false;\r\n                     this.answerFeedback(true);\r\n                 }\r\n"
                },
                {
                    "date": 1625130063707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -495,9 +495,9 @@\n             .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n                 this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n-                if (this._soundFile[this._rigthName[1]].time >= this._soundFile[this._rigthName[0]].time) {\r\n+                if (this._soundFile[this._rigthName[1]].time > this._soundFile[this._rigthName[0]].time) {\r\n \r\n                     this._overAnimShow.visible = false;\r\n                     this.answerFeedback(true);\r\n                 }\r\n"
                },
                {
                    "date": 1625130298599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,14 +225,14 @@\n             this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n             this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n             this._overAnimShow.visible = false;\r\n \r\n-            this._overPiano.animationName = this._animateName['piano'].idle;\r\n-            this._overPiano.skinName = this._animateName['piano'].skin;\r\n+            this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n+            this._overPiano.skinName = this._animateName[this._rigthName[0]].skin;\r\n             this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n-            this._overGu.animationName = this._animateName['gu'].idle;\r\n-            this._overGu.skinName = this._animateName['gu'].skin;\r\n+            this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n+            this._overGu.skinName = this._animateName[this._rigthName[0]].skin;\r\n             this._overGu.url = \"ui://733aoo45gzaz72\";\r\n         }\r\n         if (components) {\r\n             for (const key in components) {\r\n"
                },
                {
                    "date": 1625130335707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,9 +230,9 @@\n             this._overPiano.skinName = this._animateName[this._rigthName[0]].skin;\r\n             this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n \r\n             this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n-            this._overGu.skinName = this._animateName[this._rigthName[0]].skin;\r\n+            this._overGu.skinName = this._animateName[this._rigthName[1]].skin;\r\n             this._overGu.url = \"ui://733aoo45gzaz72\";\r\n         }\r\n         if (components) {\r\n             for (const key in components) {\r\n"
                },
                {
                    "date": 1625130424564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,8 +463,9 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n+        console.log('===== ====' + );\r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n"
                },
                {
                    "date": 1625130438426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,9 +463,11 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        console.log('===== ====' + );\r\n+        console.log('===== ====' + this._rigthName[0]);\r\n+        console.log('===== ====' + this._rigthName[0]);\r\n+\r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n"
                },
                {
                    "date": 1625130447211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,10 +463,10 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        console.log('===== ====' + this._rigthName[0]);\r\n-        console.log('===== ====' + this._rigthName[0]);\r\n+        console.log('===== 0000 ====' + this._rigthName[0]);\r\n+        console.log('===== 1111 ====' + this._rigthName[0]);\r\n \r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n"
                },
                {
                    "date": 1625130554831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,9 +464,9 @@\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n         console.log('===== 0000 ====' + this._rigthName[0]);\r\n-        console.log('===== 1111 ====' + this._rigthName[0]);\r\n+        console.log('===== 1111 ====' + this._rigthName[1]);\r\n \r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n"
                },
                {
                    "date": 1625130699030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,10 +219,33 @@\n \r\n         item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n         this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n+        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+\r\n+        for (let i = 0; i < this._view.numChildren; i++) {\r\n+            if (this._view.getChildAt(i).group == optionGroup) {\r\n+                let btn = null;\r\n+                if (this._isAnimateShow) {\r\n+\r\n+                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                    btn.animationName = this._animateName[btn.name].idle;\r\n+                    btn.skinName = this._animateName[btn.name].skin;\r\n+                    btn.url = \"ui://733aoo45gzaz72\";\r\n+\r\n+                } else {\r\n+                    btn = this._view.getChildAt(i).asButton;\r\n+                }\r\n+\r\n+                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n+                this._options[btn.name] = btn;\r\n+            }\r\n+        }\r\n+\r\n         if (this._isAnimateShow) {\r\n             this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+\r\n+\r\n             this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n             this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n             this._overAnimShow.visible = false;\r\n \r\n"
                },
                {
                    "date": 1625130731219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,11 +241,11 @@\n             }\r\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n+\r\n             this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n-\r\n             this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n             this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n             this._overAnimShow.visible = false;\r\n \r\n@@ -255,9 +255,11 @@\n \r\n             this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n             this._overGu.skinName = this._animateName[this._rigthName[1]].skin;\r\n             this._overGu.url = \"ui://733aoo45gzaz72\";\r\n+\r\n         }\r\n+\r\n         if (components) {\r\n             for (const key in components) {\r\n                 let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n                 let componentBundle: any = await loadBundle(componentPath);\r\n"
                },
                {
                    "date": 1625130760598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,9 +219,9 @@\n \r\n         item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n         this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n-        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n+        this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == optionGroup) {\r\n                 let btn = null;\r\n@@ -242,10 +242,10 @@\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n \r\n-            this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n+\r\n             this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n             this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n             this._overAnimShow.visible = false;\r\n \r\n"
                },
                {
                    "date": 1625130767338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,9 +222,9 @@\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n-            if (this._view.getChildAt(i).group == optionGroup) {\r\n+            if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = null;\r\n                 if (this._isAnimateShow) {\r\n \r\n                     btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n"
                },
                {
                    "date": 1625130779854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,22 +223,12 @@\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n-                let btn = null;\r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                    btn.animationName = this._animateName[btn.name].idle;\r\n-                    btn.skinName = this._animateName[btn.name].skin;\r\n-                    btn.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-                } else {\r\n-                    btn = this._view.getChildAt(i).asButton;\r\n-                }\r\n-\r\n-                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n-                this._options[btn.name] = btn;\r\n+                btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                btn.animationName = this._animateName[btn.name].idle;\r\n+                btn.skinName = this._animateName[btn.name].skin;\r\n+                btn.url = \"ui://733aoo45gzaz72\";\r\n             }\r\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1625130816198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,8 +53,10 @@\n \r\n     private _guideName: string;\r\n \r\n     private _overAnimShow: fgui.GGroup;\r\n+    private _overObjs: fgui.GLoader3D[] = [],\r\n+\r\n     private _overPiano: fgui.GLoader3D;\r\n     private _overGu: fgui.GLoader3D;\r\n \r\n     private _scheduleTime = 0.3;\r\n"
                },
                {
                    "date": 1625130822081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,13 +53,10 @@\n \r\n     private _guideName: string;\r\n \r\n     private _overAnimShow: fgui.GGroup;\r\n-    private _overObjs: fgui.GLoader3D[] = [],\r\n+    private _overObjs: fgui.GLoader3D[] = [];\r\n \r\n-    private _overPiano: fgui.GLoader3D;\r\n-    private _overGu: fgui.GLoader3D;\r\n-\r\n     private _scheduleTime = 0.3;\r\n     private _dragging = false;\r\n     private _cachDragPos = { x: 0, y: 0 }\r\n \r\n"
                },
                {
                    "date": 1625130849577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,12 +222,13 @@\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n-                btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n+                this._overObjs[btn];\r\n             }\r\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1625130855994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n-                this._overObjs[btn];\r\n+                this._overObjs[i] = btn;\r\n             }\r\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1625130864317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n-                this._overObjs[i] = btn;\r\n+                this._overObjs[this._overObjs.length] = btn;\r\n             }\r\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1625130929277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,11 +220,13 @@\n         this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n+        let len = 0;\r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                btn.name = this._rigthName[]\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[this._overObjs.length] = btn;\r\n"
                },
                {
                    "date": 1625130947091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,13 +224,14 @@\n         let len = 0;\r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n-                btn.name = this._rigthName[]\r\n+                btn.name = this._rigthName[len];\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n-                this._overObjs[this._overObjs.length] = btn;\r\n+                this._overObjs[len] = btn;\r\n+                len++;\r\n             }\r\n         }\r\n \r\n         if (this._isAnimateShow) {\r\n"
                },
                {
                    "date": 1625130968678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,26 +233,8 @@\n                 len++;\r\n             }\r\n         }\r\n \r\n-        if (this._isAnimateShow) {\r\n-\r\n-\r\n-\r\n-            this._overPiano = this._view.getChild(\"overPiano\") as fgui.GLoader3D;\r\n-            this._overGu = this._view.getChild(\"overGu\") as fgui.GLoader3D;\r\n-            this._overAnimShow.visible = false;\r\n-\r\n-            this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n-            this._overPiano.skinName = this._animateName[this._rigthName[0]].skin;\r\n-            this._overPiano.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-            this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n-            this._overGu.skinName = this._animateName[this._rigthName[1]].skin;\r\n-            this._overGu.url = \"ui://733aoo45gzaz72\";\r\n-\r\n-        }\r\n-\r\n         if (components) {\r\n             for (const key in components) {\r\n                 let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n                 let componentBundle: any = await loadBundle(componentPath);\r\n"
                },
                {
                    "date": 1625131004849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -470,9 +470,9 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        this._overPiano.animationName = this._animateName[this._rigthName[0]].play;\r\n+        this._overObjs[0].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         cc.tween(this._overPiano)\r\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n             .call(() => {\r\n"
                },
                {
                    "date": 1625131038452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -472,13 +472,13 @@\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         this._overObjs[0].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n-        cc.tween(this._overPiano)\r\n+        cc.tween(this._overObjs[0])\r\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n             .call(() => {\r\n \r\n-                this._overPiano.animationName = this._animateName[this._rigthName[0]].idle;\r\n+                this._overObjs[0].animationName = this._animateName[this._rigthName[0]].idle;\r\n \r\n                 if (this._soundFile[this._rigthName[0]].time >= this._soundFile[this._rigthName[1]].time) {\r\n \r\n                     this._overAnimShow.visible = false;\r\n@@ -491,15 +491,15 @@\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[1]].path);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio2, false, 1);\r\n \r\n-        this._overGu.animationName = this._animateName[this._rigthName[1]].play;\r\n+        this._overObjs[1].animationName = this._animateName[this._rigthName[1]].play;\r\n \r\n-        cc.tween(this._overGu)\r\n+        cc.tween(this._overObjs[1])\r\n             .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n-                this._overGu.animationName = this._animateName[this._rigthName[1]].idle;\r\n+                this._overObjs[1].animationName = this._animateName[this._rigthName[1]].idle;\r\n                 if (this._soundFile[this._rigthName[1]].time > this._soundFile[this._rigthName[0]].time) {\r\n \r\n                     this._overAnimShow.visible = false;\r\n                     this.answerFeedback(true);\r\n"
                },
                {
                    "date": 1625131135737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,8 +225,9 @@\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 btn.name = this._rigthName[len];\r\n+                console.log('== ==== ====' + );\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[len] = btn;\r\n"
                },
                {
                    "date": 1625131147439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 btn.name = this._rigthName[len];\r\n-                console.log('== ==== ====' + );\r\n+                console.log('== ==== ====' + this._rigthName[len]);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[len] = btn;\r\n"
                },
                {
                    "date": 1625131152987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 btn.name = this._rigthName[len];\r\n-                console.log('== ==== ====' + this._rigthName[len]);\r\n+                console.log('====== len ====' + this._rigthName[len]);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[len] = btn;\r\n"
                },
                {
                    "date": 1625131238270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,10 +224,13 @@\n         let len = 0;\r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n+                if (btn.name === 'overBg') {\r\n+\r\n+                }\r\n                 btn.name = this._rigthName[len];\r\n-                console.log('====== len ====' + this._rigthName[len]);\r\n+                console.log('====== len ========' + this._rigthName[len]);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[len] = btn;\r\n"
                },
                {
                    "date": 1625131243583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,8 +226,9 @@\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 if (btn.name === 'overBg') {\r\n \r\n+                    break;\r\n                 }\r\n                 btn.name = this._rigthName[len];\r\n                 console.log('====== len ========' + this._rigthName[len]);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n"
                },
                {
                    "date": 1625131249407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,8 @@\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 if (btn.name === 'overBg') {\r\n-\r\n                     break;\r\n                 }\r\n                 btn.name = this._rigthName[len];\r\n                 console.log('====== len ========' + this._rigthName[len]);\r\n"
                },
                {
                    "date": 1625131277585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,8 +220,9 @@\n         this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n \r\n+        this._overAnimShow.visible = false;\r\n         let len = 0;\r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n"
                },
                {
                    "date": 1625131284268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,10 +219,10 @@\n         item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n         this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n \r\n         this._overAnimShow = this._view.getChild(\"overAnimShow\").asGroup;\r\n+        this._overAnimShow.visible = false;\r\n \r\n-        this._overAnimShow.visible = false;\r\n         let len = 0;\r\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n"
                },
                {
                    "date": 1625131387937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,8 +475,10 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n+        return;\r\n+\r\n         this._overObjs[0].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         cc.tween(this._overObjs[0])\r\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n"
                },
                {
                    "date": 1625131410587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,12 +475,12 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n+        this._overObjs[0].animationName = this._animateName[this._rigthName[0]].play;\r\n+\r\n         return;\r\n \r\n-        this._overObjs[0].animationName = this._animateName[this._rigthName[0]].play;\r\n-\r\n         cc.tween(this._overObjs[0])\r\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n             .call(() => {\r\n \r\n"
                },
                {
                    "date": 1625131468590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \r\n     private _guideName: string;\r\n \r\n     private _overAnimShow: fgui.GGroup;\r\n-    private _overObjs: fgui.GLoader3D[] = [];\r\n+    private _overObjs: fgui.GLoader3D[] = ;\r\n \r\n     private _scheduleTime = 0.3;\r\n     private _dragging = false;\r\n     private _cachDragPos = { x: 0, y: 0 }\r\n"
                },
                {
                    "date": 1625131489943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \r\n     private _guideName: string;\r\n \r\n     private _overAnimShow: fgui.GGroup;\r\n-    private _overObjs: fgui.GLoader3D[] = ;\r\n+    private _overObjs: any = {};\r\n \r\n     private _scheduleTime = 0.3;\r\n     private _dragging = false;\r\n     private _cachDragPos = { x: 0, y: 0 }\r\n@@ -233,9 +233,9 @@\n                 console.log('====== len ========' + this._rigthName[len]);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n-                this._overObjs[len] = btn;\r\n+                this._overObjs[btn.name] = btn;\r\n                 len++;\r\n             }\r\n         }\r\n \r\n"
                },
                {
                    "date": 1625131506387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n                 if (btn.name === 'overBg') {\r\n                     break;\r\n                 }\r\n                 btn.name = this._rigthName[len];\r\n-                console.log('====== len ========' + this._rigthName[len]);\r\n+                console.log('====== len ========' + btn.name);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[btn.name] = btn;\r\n"
                },
                {
                    "date": 1625131517288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,9 +475,9 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        this._overObjs[0].animationName = this._animateName[this._rigthName[0]].play;\r\n+        this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         return;\r\n \r\n         cc.tween(this._overObjs[0])\r\n"
                },
                {
                    "date": 1625131553620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,8 +475,10 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n+        console.log('===== 1111 ====' + this._rigthName[1]);\r\n+\r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         return;\r\n \r\n"
                },
                {
                    "date": 1625131562269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,9 +475,9 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('===== 1111 ====' + this._rigthName[1]);\r\n+        console.log('===== 2222222 ====' + this._rigthName[1]);\r\n \r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         return;\r\n"
                },
                {
                    "date": 1625131618676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -475,9 +475,9 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('===== 2222222 ====' + this._rigthName[1]);\r\n+        console.log('===== 2222222 ====' + this._animateName[this._rigthName[0]].play);\r\n \r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         return;\r\n"
                },
                {
                    "date": 1625131672063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -477,8 +477,9 @@\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         console.log('===== 2222222 ====' + this._animateName[this._rigthName[0]].play);\r\n \r\n+        console.log(this._overObjs[this._rigthName[0]]);\r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         return;\r\n \r\n"
                },
                {
                    "date": 1625131677480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -478,8 +478,9 @@\n \r\n         console.log('===== 2222222 ====' + this._animateName[this._rigthName[0]].play);\r\n \r\n         console.log(this._overObjs[this._rigthName[0]]);\r\n+\r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         return;\r\n \r\n"
                },
                {
                    "date": 1625131741072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \r\n     private _guideName: string;\r\n \r\n     private _overAnimShow: fgui.GGroup;\r\n-    private _overObjs: any = {};\r\n+    private _overObjs = {};\r\n \r\n     private _scheduleTime = 0.3;\r\n     private _dragging = false;\r\n     private _cachDragPos = { x: 0, y: 0 }\r\n"
                },
                {
                    "date": 1625131792869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,8 +234,9 @@\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[btn.name] = btn;\r\n+                console.log('====== len ========' + btn);\r\n                 len++;\r\n             }\r\n         }\r\n \r\n"
                },
                {
                    "date": 1625131800548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[btn.name] = btn;\r\n-                console.log('====== len ========' + btn);\r\n+                console.log(btn);\r\n                 len++;\r\n             }\r\n         }\r\n \r\n"
                },
                {
                    "date": 1625131847274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n                 if (btn.name === 'overBg') {\r\n                     break;\r\n                 }\r\n                 btn.name = this._rigthName[len];\r\n-                console.log('====== len ========' + btn.name);\r\n+                console.log('====== len PPPPPP ========' + btn.name);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[btn.name] = btn;\r\n"
                },
                {
                    "date": 1625131860835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,9 +226,9 @@\n         for (let i = 0; i < this._view.numChildren; i++) {\r\n             if (this._view.getChildAt(i).group == this._overAnimShow) {\r\n                 let btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                 if (btn.name === 'overBg') {\r\n-                    break;\r\n+                    continue;\r\n                 }\r\n                 btn.name = this._rigthName[len];\r\n                 console.log('====== len PPPPPP ========' + btn.name);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n"
                },
                {
                    "date": 1625131871597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,14 +229,12 @@\n                 if (btn.name === 'overBg') {\r\n                     continue;\r\n                 }\r\n                 btn.name = this._rigthName[len];\r\n-                console.log('====== len PPPPPP ========' + btn.name);\r\n                 btn.animationName = this._animateName[btn.name].idle;\r\n                 btn.skinName = this._animateName[btn.name].skin;\r\n                 btn.url = \"ui://733aoo45gzaz72\";\r\n                 this._overObjs[btn.name] = btn;\r\n-                console.log(btn);\r\n                 len++;\r\n             }\r\n         }\r\n \r\n"
                },
                {
                    "date": 1625131912317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,28 +467,22 @@\n \r\n         cc.audioEngine.stopAllEffects();\r\n         this._overAnimShow.visible = true;\r\n \r\n-        console.log('===== 0000 ====' + this._rigthName[0]);\r\n-        console.log('===== 1111 ====' + this._rigthName[1]);\r\n-\r\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('===== 2222222 ====' + this._animateName[this._rigthName[0]].play);\r\n \r\n         console.log(this._overObjs[this._rigthName[0]]);\r\n \r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n-        return;\r\n-\r\n-        cc.tween(this._overObjs[0])\r\n+        cc.tween(this._overObjs[this._rigthName[0]])\r\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n             .call(() => {\r\n \r\n-                this._overObjs[0].animationName = this._animateName[this._rigthName[0]].idle;\r\n+                this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].idle;\r\n \r\n                 if (this._soundFile[this._rigthName[0]].time >= this._soundFile[this._rigthName[1]].time) {\r\n \r\n                     this._overAnimShow.visible = false;\r\n"
                },
                {
                    "date": 1625131934297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -495,11 +495,11 @@\n         let item2 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[1]].path);\r\n         let audio2: cc.AudioClip = await loadResource(item2.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio2, false, 1);\r\n \r\n-        this._overObjs[1].animationName = this._animateName[this._rigthName[1]].play;\r\n+        this._overObjs[this._rigthName[1]].animationName = this._animateName[this._rigthName[1]].play;\r\n \r\n-        cc.tween(this._overObjs[1])\r\n+        cc.tween(this._overObjs[this._rigthName[1]])\r\n             .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n                 this._overObjs[1].animationName = this._animateName[this._rigthName[1]].idle;\r\n"
                },
                {
                    "date": 1625131995648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -501,9 +501,9 @@\n         cc.tween(this._overObjs[this._rigthName[1]])\r\n             .delay(this._soundFile[this._rigthName[1]].time)\r\n             .call(() => {\r\n \r\n-                this._overObjs[1].animationName = this._animateName[this._rigthName[1]].idle;\r\n+                this._overObjs[this._rigthName[1]].animationName = this._animateName[this._rigthName[1]].idle;\r\n                 if (this._soundFile[this._rigthName[1]].time > this._soundFile[this._rigthName[0]].time) {\r\n \r\n                     this._overAnimShow.visible = false;\r\n                     this.answerFeedback(true);\r\n"
                },
                {
                    "date": 1625132111931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,15 +426,9 @@\n             } else if (state.submit === this.submitType.WrongFeed) {\r\n                 this.answerFeedback(false);\r\n             } else if (state.submit === this.submitType.RightFeed) {\r\n \r\n-                if (this._isAnimateShow) {\r\n-\r\n-                    this.playOverShowAnimate();\r\n-\r\n-                } else {\r\n-                    this.answerFeedback(true);\r\n-                }\r\n+                this.playOverShowAnimate();\r\n             }\r\n         }\r\n \r\n         if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n"
                },
                {
                    "date": 1625198250914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,9 +465,9 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-\r\n+        console.log('==== ====');\r\n         console.log(this._overObjs[this._rigthName[0]]);\r\n \r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n"
                },
                {
                    "date": 1625198257620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,9 +465,9 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('==== ====');\r\n+        console.log('==== 结束动画展示 ====');\r\n         console.log(this._overObjs[this._rigthName[0]]);\r\n \r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n"
                },
                {
                    "date": 1625198357484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,9 +466,8 @@\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n         console.log('==== 结束动画展示 ====');\r\n-        console.log(this._overObjs[this._rigthName[0]]);\r\n \r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         cc.tween(this._overObjs[this._rigthName[0]])\r\n"
                },
                {
                    "date": 1625198593536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -465,10 +465,8 @@\n         let item1 = fgui.UIPackage.getItemByURL(this._soundFile[this._rigthName[0]].path);\r\n         let audio: cc.AudioClip = await loadResource(item1.file, cc.AudioClip);\r\n         cc.audioEngine.play(audio, false, 1);\r\n \r\n-        console.log('==== 结束动画展示 ====');\r\n-\r\n         this._overObjs[this._rigthName[0]].animationName = this._animateName[this._rigthName[0]].play;\r\n \r\n         cc.tween(this._overObjs[this._rigthName[0]])\r\n             .delay(this._soundFile[this._rigthName[0]].time)\r\n"
                },
                {
                    "date": 1625198636312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -626,12 +626,12 @@\n         }, 2000);\r\n     }\r\n \r\n     /**\r\n-         * 拖动指引\r\n-         * @param fromObj start\r\n-         * @param toObj end\r\n-         */\r\n+    * 拖动指引\r\n+    * @param fromObj start\r\n+    * @param toObj end\r\n+    */\r\n     handTips1(fromObj: fgui.GObject, toObj: fgui.GObject) {\r\n         let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n         this._view.addChild(hand);\r\n         hand.x = fromObj.x;\r\n"
                }
            ],
            "date": 1623989407691,
            "name": "Commit-0",
            "content": "\r\n/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: ruzhuan\r\n * @Date: 2021-06-07 14:40:00\r\n * @LastEditors: ruzhuan\r\n * @LastEditTime: 2021-06-07 14:40:00\r\n */\r\nconst { loadBundle, loadPrefab, loadResource } = window['GlobalData'].sample;\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class choose_model03_v1 extends cc.Component {\r\n    private _worldRoot: cc.Node;\r\n    private _view: fgui.GComponent;\r\n    private _c1: fgui.Controller;\r\n    private _c2: fgui.Controller;\r\n\r\n    private _submit: fgui.GButton;\r\n    private _title: fgui.GButton;\r\n    private _titleTrigger: fgui.GLoader;\r\n\r\n    // 选项集合\r\n    private _options = {};\r\n\r\n    private _lightSelect = {};\r\n\r\n    private _rightSoundFile = [];\r\n\r\n    private _magicPen: fgui.GButton;\r\n\r\n    private _magicPenData = [];\r\n\r\n    private _optionsRect = {};\r\n\r\n    private _package: any;\r\n\r\n    private _maskBg: fgui.GGraph;\r\n\r\n    private _labaguai: fgui.GButton;\r\n\r\n    private _isAnimateShow: boolean = false;\r\n\r\n    private _soundFile = {};\r\n\r\n    private _animateName = {};\r\n\r\n    private _rigthName = [];\r\n\r\n    private _clickSound: cc.AudioClip;\r\n\r\n    private _dragSound: cc.AudioClip;\r\n\r\n    private submitType: any = cc.Enum({\r\n\r\n        No: 0,\r\n        GuideShow: 1,\r\n        WrongFeed: 2,\r\n        RightFeed: 3\r\n    });\r\n\r\n    // 远程动态组件\r\n    private feedback: any;\r\n\r\n    private _state = {};\r\n\r\n    get state(): any {\r\n        return this._state;\r\n    }\r\n\r\n    set state(v: any) {\r\n        this.updateUi(this._state, v);\r\n        this._state = v;\r\n        this.mergeState();\r\n    }\r\n\r\n    onLoad() {\r\n        this._worldRoot = cc.find(\"Canvas\").parent;\r\n\r\n        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n        this._view.x = (fgui.GRoot.inst.width - this._view.width) / 2;\r\n\r\n        fgui.GRoot.inst.addChild(this._view);\r\n\r\n        this._c1 = this._view.getController(\"c1\");\r\n        // 臨時\r\n        // bug 初始设置不播放不生效\r\n        if (this._c1) {\r\n            this._c1.selectedIndex = 1;\r\n            this._c1.selectedIndex = 0;\r\n        }\r\n\r\n        this._maskBg = this._view.getChild(\"maskBg\").asGraph;\r\n        this._maskBg.visible = false;\r\n\r\n        this._submit = this._view.getChild(\"submit\").asButton;\r\n        if (this._submit) this._submit.on(fgui.Event.CLICK, this._clickSubmit, this);\r\n\r\n        this._titleTrigger = this._view.getChild(\"titleTrigger\").asLoader;\r\n        if (this._titleTrigger) this._titleTrigger.on(fgui.Event.CLICK, this._clickTitle, this);\r\n\r\n        this._title = this._view.getChild(\"title\").asButton;\r\n        let optionGroup = this._view.getChild(\"optionBox\").asGroup;\r\n\r\n        for (let i = 0; i < this._view.numChildren; i++) {\r\n            if (this._view.getChildAt(i).group == optionGroup) {\r\n                let btn = null;\r\n                if (this._isAnimateShow) {\r\n\r\n                    btn = this._view.getChildAt(i) as fgui.GLoader3D;\r\n                    btn.animationName = this._animateName[btn.name].idle;\r\n                    btn.skinName = this._animateName[btn.name].skin;\r\n                    btn.url = \"ui://733aoo45gzaz72\";\r\n\r\n                } else {\r\n                    btn = this._view.getChildAt(i).asButton;\r\n                }\r\n\r\n                btn.on(fgui.Event.CLICK, this._clickOption, this);\r\n                this._options[btn.name] = btn;\r\n\r\n                if (!this._isAnimateShow) {\r\n\r\n                    if (Object.keys(this._options).length <= 2) {\r\n                        let item = fgui.UIPackage.getItemByURL(btn.sound);\r\n                        this._rightSoundFile.push(item);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        let lightGroup = this._view.getChild(\"selectLight\").asGroup;\r\n        let tempLight = {};\r\n\r\n        for (let i = 0; i < this._view.numChildren; i++) {\r\n            if (this._view.getChildAt(i).group == lightGroup) {\r\n                let node: fgui.GImage = this._view.getChildAt(i).asImage;\r\n                node.visible = false;\r\n                let subName = node.name.substring(0, node.name.indexOf('_'));\r\n                this._lightSelect[subName] = node;\r\n                tempLight[subName] = false;\r\n            }\r\n        }\r\n\r\n        this._labaguai = this._view.getChild(\"labaguai\").asButton;\r\n        if (this._labaguai) this._labaguai.on(fgui.Event.CLICK, this._clickLaBaGuai, this);\r\n\r\n        this._magicPen = this._view.getChild(\"magicPen\").asButton;\r\n        this._magicPen.draggable = true;\r\n\r\n        this._magicPenData = [{ icon: this._magicPen.icon, x: 1743, y: 466 }, { icon: this._magicPen.selectedIcon, x: 1743, y: 466 }];\r\n\r\n        this._magicPen.on(fgui.Event.TOUCH_BEGIN, this._onDragStart, this);\r\n        this._magicPen.on(fgui.Event.TOUCH_MOVE, this._onDragMove, this);\r\n        this._magicPen.on(fgui.Event.TOUCH_END, this._onDragEnd, this);\r\n\r\n        // 初始化state\r\n        this._state = {\r\n            title: false,\r\n            laBaGuaiPlay: false,\r\n            submit: false,\r\n            move: false,\r\n            lightSelect: tempLight,\r\n            clickPlayName: ''\r\n        }\r\n\r\n        // 临时 \r\n        // 禁止操作期间 切页\r\n        this.disableForbidHandle();\r\n        // 销毁反馈\r\n        let feedback: any = this._worldRoot.getChildByName(\"feedback\");\r\n        if (feedback) feedback.destroy();\r\n    }\r\n\r\n    async init(data: any) {\r\n        // 临时 model component json 配置加载\r\n        let { pathConfig, model, components } = data;\r\n        let Package = pathConfig.packageName;\r\n        let GComponent = model.uiPath;\r\n        let { isAnimateShow, soundFile, rightSoundFile, animateName, rightName, optionsRect } = model.config;\r\n        this._package = Package;\r\n\r\n        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n\r\n        console.log('==== isAnimateShow  ====' + isAnimateShow);\r\n\r\n        if (isAnimateShow) this._isAnimateShow = isAnimateShow;\r\n        if (soundFile) this._soundFile = soundFile;\r\n        if (rightSoundFile) {\r\n\r\n            for (let i = 0; i < rightSoundFile.length; i++) {\r\n                let item = fgui.UIPackage.getItemByURL(rightSoundFile[i]);\r\n                this._rightSoundFile.push(item);\r\n            }\r\n        }\r\n        if (animateName) this._animateName = animateName;\r\n        if (rightName) this._rigthName = rightName;\r\n        if (optionsRect) {\r\n\r\n            for (var key in optionsRect) {\r\n\r\n                let tempRect = new cc.Rect(optionsRect[key].x, optionsRect[key].y, optionsRect[key].width, optionsRect[key].height);\r\n                this._optionsRect[key] = tempRect;\r\n            }\r\n        }\r\n\r\n        let item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754k');\r\n        this._clickSound = await loadResource(item.file, cc.AudioClip);\r\n\r\n        item = fgui.UIPackage.getItemByURL('ui://733aoo45r3754l');\r\n        this._dragSound = await loadResource(item.file, cc.AudioClip);\r\n\r\n        if (components) {\r\n            for (const key in components) {\r\n                let componentPath: any = `${pathConfig.remoteUrl}${pathConfig.componentBundlePath}${components[key].bundleName}`;\r\n                let componentBundle: any = await loadBundle(componentPath);\r\n                let componentPrefab: any = await loadPrefab(componentBundle, components[key].prefabName);\r\n                this[key] = componentPrefab;\r\n            }\r\n        }\r\n    }\r\n\r\n    private _onDragStart(evt: fgui.Event): void {\r\n\r\n        cc.audioEngine.playEffect(this._clickSound, false);\r\n\r\n        evt.captureTouch();\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.move = true;\r\n\r\n        this.updateState(state);\r\n\r\n    }\r\n\r\n    private _onDragMove(evt: fgui.Event): void {\r\n\r\n\r\n\r\n    }\r\n\r\n    private _onDragEnd(evt: fgui.Event): void {\r\n        cc.audioEngine.playEffect(this._dragSound, false);\r\n\r\n        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n        let btnRect = new cc.Rect(btn.x - btn.width / 2, btn.y - btn.height / 2, btn.width, btn.height);\r\n\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.move = false;\r\n        for (var key in this._optionsRect) {\r\n\r\n            let rect = this._optionsRect[key];\r\n            if (rect.intersects(btnRect)) {\r\n\r\n                state.lightSelect[key] = !state.lightSelect[key];\r\n                break;\r\n            }\r\n        }\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _clickTitle(evt: any) {\r\n\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.title = true;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _clickLaBaGuai(evt: any) {\r\n\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.laBaGuaiPlay = true;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private async _clickOption(evt: any) {\r\n\r\n        var btn: fgui.GObject = fgui.GObject.cast(evt.currentTarget);\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.clickPlayName = btn.name;\r\n        this.updateState(state);\r\n    }\r\n\r\n    private _clickSubmit(evt: any) {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let num = 0;\r\n        let submitNames = [];\r\n        for (var key in state.lightSelect) {\r\n\r\n            if (state.lightSelect[key]) {\r\n                num++;\r\n                submitNames.push(key);\r\n            }\r\n        }\r\n        if (num === 0) {\r\n            state.submit = this.submitType.GuideShow;\r\n        } else {\r\n\r\n            let submitNamesTemp = submitNames.sort();\r\n            let right = this._rigthName.sort();\r\n            if (JSON.stringify(submitNamesTemp) === JSON.stringify(right)) {\r\n                state.submit = this.submitType.RightFeed;\r\n\r\n            } else {\r\n                state.submit = this.submitType.WrongFeed;\r\n            }\r\n        }\r\n        this.updateState(state);\r\n    }\r\n\r\n    // 获取状态\r\n    getState(data: any) {\r\n        this.updateState(data);\r\n    }\r\n\r\n    // 更新状态层\r\n    updateState(curState: any) {\r\n        if (globalThis._.isEqual(this._state, curState)) return;\r\n        this.state = curState;\r\n    }\r\n\r\n    // 更新ui层\r\n    updateUi(oldState: any, state: any) {\r\n\r\n        if (!globalThis._.isEqual(oldState.submit, state.submit)) {\r\n\r\n            // 控制反馈动画和指引动画\r\n            if (state.submit === this.submitType.GuideShow) {\r\n\r\n                this.handTips2(this._labaguai);\r\n            } else if (state.submit === this.submitType.WrongFeed) {\r\n                this.answerFeedback(false);\r\n            } else if (state.submit === this.submitType.RightFeed) {\r\n\r\n                this.answerFeedback(true);\r\n            }\r\n        }\r\n\r\n        if (!globalThis._.isEqual(oldState.clickPlayName, state.clickPlayName)) {\r\n\r\n            if (oldState.clickPlayName != '' && this._isAnimateShow) {\r\n\r\n                let btn = this._options[oldState.clickPlayName];\r\n                let btnTemp = btn as fgui.GLoader3D;\r\n                btnTemp.animationName = this._animateName[btn.name].idle;\r\n            }\r\n\r\n            if (state.clickPlayName != '') {\r\n\r\n                this.playClickYueQi(state.clickPlayName);\r\n            }\r\n\r\n        }\r\n\r\n        if (!globalThis._.isEqual(oldState.laBaGuaiPlay, state.laBaGuaiPlay)) {\r\n            this.playLaBaGuai(state.laBaGuaiPlay);\r\n        }\r\n\r\n        if (!globalThis._.isEqual(oldState.move, state.move)) {\r\n\r\n            if (state.move) {\r\n\r\n                this._magicPen.icon = this._magicPenData[1].icon;\r\n\r\n            } else {\r\n\r\n                this._magicPen.icon = this._magicPenData[0].icon;\r\n                this._magicPen.x = this._magicPenData[0].x;\r\n                this._magicPen.y = this._magicPenData[0].y;\r\n            }\r\n        }\r\n\r\n        if (!globalThis._.isEqual(oldState.lightSelect, state.lightSelect)) {\r\n\r\n            for (var key in state.lightSelect) {\r\n\r\n                this._lightSelect[key].visible = state.lightSelect[key];\r\n            }\r\n        }\r\n\r\n        if (!globalThis._.isEqual(oldState.title, state.title)) {\r\n            this.playTitle(state.title);\r\n        }\r\n    }\r\n\r\n\r\n    async playClickYueQi(name: string) {\r\n\r\n        cc.audioEngine.stopAllEffects();\r\n        let btn = this._options[name];\r\n        let item = null;\r\n        if (this._isAnimateShow) {\r\n\r\n            item = fgui.UIPackage.getItemByURL(this._soundFile[name]);\r\n        } else {\r\n\r\n            item = fgui.UIPackage.getItemByURL(btn.asButton.sound);\r\n        }\r\n        let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n        let audioId = cc.audioEngine.play(audio, false, 1);\r\n        if (this._isAnimateShow) {\r\n\r\n            let btnTemp = btn as fgui.GLoader3D;\r\n            btnTemp.animationName = this._animateName[btn.name].play;\r\n            cc.audioEngine.setFinishCallback(audioId, () => {\r\n\r\n                console.log('=== animationName 停止动画 ====' + btnTemp.animationName);\r\n                btnTemp.animationName = this._animateName[btn.name].idle;\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    async playTitle(bool: boolean) {\r\n        this._c1.selectedIndex = bool ? 1 : 0;\r\n        if (bool) {\r\n            cc.audioEngine.stopAll();\r\n            this.forbidHandle();\r\n            let item = fgui.UIPackage.getItemByURL(this._title[\"_sound\"]);\r\n            let audio: cc.AudioClip = await loadResource(item.file, cc.AudioClip);\r\n            let audioId = cc.audioEngine.play(audio, false, 1);\r\n            cc.audioEngine.setFinishCallback(audioId, () => {\r\n                let state: any = globalThis._.cloneDeep(this._state);\r\n                state.title = false;\r\n                this.updateState(state);\r\n            });\r\n        } else {\r\n            this.disableForbidHandle();\r\n        }\r\n    }\r\n\r\n    playLaBaGuai(bool: boolean) {\r\n        if (bool) {\r\n            console.log('===== playLaBaGuai 111 ====' + bool);\r\n            cc.audioEngine.stopAll();\r\n            this.forbidHandle();\r\n            let curIndex = 0;\r\n            this.playRightSound(curIndex);\r\n\r\n        } else {\r\n            this.disableForbidHandle();\r\n        }\r\n    }\r\n\r\n    async playRightSound(curIndex: number) {\r\n\r\n        let audio: cc.AudioClip = await loadResource(this._rightSoundFile[curIndex].file, cc.AudioClip);\r\n        let audioId = cc.audioEngine.play(audio, false, 1);\r\n        cc.audioEngine.setFinishCallback(audioId, () => {\r\n            if (curIndex >= this._rightSoundFile.length - 1) {\r\n\r\n                // this._maskBg.visible = false;\r\n\r\n                let state: any = globalThis._.cloneDeep(this._state);\r\n                state.laBaGuaiPlay = false;\r\n                this.updateState(state);\r\n\r\n            } else {\r\n                curIndex++;\r\n                this.playRightSound(curIndex);\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    answerFeedback(bool: boolean) {\r\n        if (!this.feedback) return;\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        let feedback: any = cc.instantiate(this.feedback);\r\n        feedback.x = 960;\r\n        feedback.y = 540;\r\n        let feedbackJs: any = feedback.getComponent(cc.Component);\r\n        feedbackJs.init(bool);\r\n        feedback.parent = cc.find(\"Canvas\").parent;\r\n\r\n        setTimeout(() => {\r\n            feedback.destroy();\r\n            let state: any = globalThis._.cloneDeep(this._state);\r\n            state.submit = this.submitType.No;\r\n            this.updateState(state);\r\n        }, 2000);\r\n    }\r\n\r\n\r\n    /**\r\n     * 点击指引\r\n     * @param obj 点击对象\r\n     */\r\n    handTips2(obj: fgui.GObject) {\r\n        let hand = fgui.UIPackage.createObject(this._package, 'hand');\r\n        this._view.addChild(hand);\r\n        let tempX = obj.x + obj.width / 2;\r\n        let tempY = obj.y + obj.height / 2;\r\n\r\n        hand.x = tempX;\r\n        hand.y = tempY;\r\n\r\n        cc.tween(hand).to(0.3, {\r\n            x: tempX - 30,\r\n            y: tempY - 30\r\n        }).to(0.3, {\r\n            x: tempX,\r\n            y: tempY\r\n        }).to(0.3, {\r\n            x: tempX - 30,\r\n            y: tempY - 30\r\n        }).to(0.3, {\r\n            x: tempX,\r\n            y: tempY\r\n        }).call(() => {\r\n            this._view.removeChild(hand);\r\n            hand = null;\r\n            let state: any = globalThis._.cloneDeep(this._state);\r\n            state.submit = this.submitType.No;\r\n            this.updateState(state)\r\n        }).start();\r\n    }\r\n\r\n    // 运行时 禁止操作\r\n    forbidHandle() {\r\n        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n        if (!handleMask) {\r\n            let handleMask = new cc.Node('handleMask');\r\n            handleMask.addComponent(cc.BlockInputEvents);\r\n            handleMask.parent = this._worldRoot;\r\n            handleMask.width = 1920;\r\n            handleMask.height = 1080;\r\n            handleMask.x = 960;\r\n            handleMask.y = 540;\r\n        }\r\n    }\r\n\r\n    // 消除禁止\r\n    disableForbidHandle() {\r\n        let handleMask = this._worldRoot.getChildByName('handleMask');\r\n        if (handleMask) handleMask.destroy();\r\n    }\r\n\r\n    // 注册状态，及获取状态的方法\r\n    registerState() {\r\n        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n    }\r\n\r\n    // 解除状态，及获取状态的方法\r\n    relieveState() {\r\n        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n    }\r\n\r\n    // 本组件状态合并到全局\r\n    mergeState() {\r\n        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n    }\r\n\r\n    onEnable() {\r\n        this.registerState();\r\n    }\r\n\r\n    onDisable() {\r\n        this.relieveState();\r\n        cc.audioEngine.stopAll();\r\n    }\r\n}\r\n"
        }
    ]
}