{"version":3,"sources":["assets\\prefabLibrary\\models\\radioSwitch\\radioSwitch-model01-v1.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/*\r\n * @Descripttion: \r\n * @version: \r\n * @Author: ydlx\r\n * @Date: 2021-03-26 18:05:12\r\n * @LastEditors: ydlx\r\n * @LastEditTime: 2021-04-12 14:41:05\r\n */\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class radioSwitch_model01_v1 extends cc.Component {\r\n    private _view: fgui.GComponent;\r\n    private _radioSwitch1: fgui.Controller;  // 控制器1\r\n\r\n    private _state = {}\r\n\r\n    get state(): any {\r\n        return this._state;\r\n    }\r\n\r\n    set state(v: any) {\r\n        this._state = v;\r\n        this.updateUi(this._state);\r\n        this.mergeState();\r\n    }\r\n\r\n    onLoad() {\r\n        this._view.y = (fgui.GRoot.inst.height - this._view.height) / 2;\r\n        fgui.GRoot.inst.addChild(this._view);\r\n\r\n        // radioSwitch 题型\r\n        // 1.切换控制器\r\n        this._radioSwitch1 = this._view.getController(\"radioSwitch1\");\r\n        this._radioSwitch1.on(fgui.Event.STATUS_CHANGED, this.onSwitchChanged, this);\r\n\r\n\r\n        // 初始化state\r\n        this._state = {\r\n            selectedIndex:this._radioSwitch1.selectedIndex\r\n        }\r\n    }\r\n\r\n    init(data: any) {\r\n        let { Package, GComponent } = data;\r\n        this._view = fgui.UIPackage.createObject(Package, GComponent).asCom;\r\n    }\r\n\r\n    // 切换\r\n    onSwitchChanged(evt:any) {\r\n        let state: any = globalThis._.cloneDeep(this._state);\r\n        state.selectedIndex = evt._selectedIndex;\r\n        this.updateState(state);\r\n    }\r\n\r\n    // 获取状态\r\n    getState(data: any) {\r\n        this.updateState(data);\r\n    }\r\n\r\n    // 更新状态层\r\n    updateState(curState: any) {\r\n        if (globalThis._.isEqual(this._state, curState)) return;\r\n        this.state = curState;\r\n    }\r\n\r\n    // 更新ui层\r\n    updateUi(state: any) {\r\n        // 切换\r\n        if (state.selectedIndex !== this._radioSwitch1.selectedIndex) {\r\n            this._radioSwitch1.selectedIndex = state.selectedIndex;\r\n        }\r\n    }\r\n\r\n    // 注册状态，及获取状态的方法\r\n    registerState() {\r\n        if (window['GlobalData'].sample.registerState) window['GlobalData'].sample.registerState.call(this);\r\n    }\r\n\r\n    // 解除状态，及获取状态的方法\r\n    relieveState() {\r\n        if (window['GlobalData'].sample.relieveState) window['GlobalData'].sample.relieveState.call(this);\r\n    }\r\n\r\n    // 本组件状态合并到全局\r\n    mergeState() {\r\n        if (window['GlobalData'].sample.mergeState) window['GlobalData'].sample.mergeState.call(this);\r\n    }\r\n\r\n    onEnable() {\r\n        this.registerState();\r\n    }\r\n\r\n    onDisable() {\r\n        this.relieveState();\r\n    }\r\n}\r\n"]}